
Servo_TMC_F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005814  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d4  080059d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080059d4  080059d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d4  080059d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e5  00000000  00000000  00037900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  0003a1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f165  00000000  00000000  0003c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019560  00000000  00000000  0005ba75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1cb1  00000000  00000000  00074fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136c86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056bc  00000000  00000000  00136cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005984 	.word	0x08005984

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005984 	.word	0x08005984

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fff0 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f848 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fbba 	bl	800094c <MX_GPIO_Init>
  MX_CAN_Init();
 80001d8:	f000 f98a 	bl	80004f0 <MX_CAN_Init>
  MX_UART4_Init();
 80001dc:	f000 fb24 	bl	8000828 <MX_UART4_Init>
  MX_UART5_Init();
 80001e0:	f000 fb52 	bl	8000888 <MX_UART5_Init>
  MX_I2C1_Init();
 80001e4:	f000 f9b8 	bl	8000558 <MX_I2C1_Init>
  MX_SPI2_Init();
 80001e8:	f000 f9f6 	bl	80005d8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80001ec:	f000 fb7c 	bl	80008e8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80001f0:	f000 f8a4 	bl	800033c <MX_ADC2_Init>
  MX_TIM1_Init();
 80001f4:	f000 fa2e 	bl	8000654 <MX_TIM1_Init>
  MX_ADC3_Init();
 80001f8:	f000 f90a 	bl	8000410 <MX_ADC3_Init>
  MX_TIM2_Init();
 80001fc:	f000 faba 	bl	8000774 <MX_TIM2_Init>
  HAL_GPIO_WritePin(GPIOC, OK_DRV_EN_Pin|EN_OK_Pin|SOFT_START_RELAY_Pin|ENC2_SELECT_Pin|FAULT_LED_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, TMC_OK_LED_Pin|RST_TMC_Pin|EN_TMC_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, STO3_out_Pin|EM_BRAKE_Pin, GPIO_PIN_RESET);
  */
  HAL_GPIO_WritePin(GPIOA, TMC_OK_LED_Pin, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	2180      	movs	r1, #128	; 0x80
 8000204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000208:	f002 fa08 	bl	800261c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FAULT_LED_Pin, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	4812      	ldr	r0, [pc, #72]	; (800025c <main+0x94>)
 8000212:	f002 fa03 	bl	800261c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	2110      	movs	r1, #16
 800021a:	4811      	ldr	r0, [pc, #68]	; (8000260 <main+0x98>)
 800021c:	f002 f9fe 	bl	800261c <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000224:	f001 f82a 	bl	800127c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, SOFT_START_RELAY_Pin, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2108      	movs	r1, #8
 800022c:	480b      	ldr	r0, [pc, #44]	; (800025c <main+0x94>)
 800022e:	f002 f9f5 	bl	800261c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RST_TMC_Pin|EN_TMC_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023c:	f002 f9ee 	bl	800261c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN_TMC_Pin, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f002 f9e7 	bl	800261c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN_OK_Pin, GPIO_PIN_RESET); //pull low - disable the
 800024e:	2200      	movs	r2, #0
 8000250:	2102      	movs	r1, #2
 8000252:	4802      	ldr	r0, [pc, #8]	; (800025c <main+0x94>)
 8000254:	f002 f9e2 	bl	800261c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x90>
 800025a:	bf00      	nop
 800025c:	48000800 	.word	0x48000800
 8000260:	48001400 	.word	0x48001400

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b09e      	sub	sp, #120	; 0x78
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f005 fb7e 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	223c      	movs	r2, #60	; 0x3c
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f005 fb70 	bl	8005974 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000294:	2303      	movs	r3, #3
 8000296:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000298:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800029c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800029e:	2304      	movs	r3, #4
 80002a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	2302      	movs	r3, #2
 80002ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80002b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80002b8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 faea 	bl	8002898 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ca:	f000 fc2b 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2302      	movs	r3, #2
 80002d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 fb12 	bl	8003914 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002f6:	f000 fc15 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80002fa:	f241 13ba 	movw	r3, #4538	; 0x11ba
 80002fe:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000308:	2300      	movs	r3, #0
 800030a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800030c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000310:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000316:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000318:	2300      	movs	r3, #0
 800031a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800031c:	2300      	movs	r3, #0
 800031e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000320:	463b      	mov	r3, r7
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fd2e 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800032e:	f000 fbf9 	bl	8000b24 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3778      	adds	r7, #120	; 0x78
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	463b      	mov	r3, r7
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
 8000350:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000352:	4b2d      	ldr	r3, [pc, #180]	; (8000408 <MX_ADC2_Init+0xcc>)
 8000354:	4a2d      	ldr	r2, [pc, #180]	; (800040c <MX_ADC2_Init+0xd0>)
 8000356:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000358:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <MX_ADC2_Init+0xcc>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800035e:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <MX_ADC2_Init+0xcc>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000364:	4b28      	ldr	r3, [pc, #160]	; (8000408 <MX_ADC2_Init+0xcc>)
 8000366:	2201      	movs	r2, #1
 8000368:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800036a:	4b27      	ldr	r3, [pc, #156]	; (8000408 <MX_ADC2_Init+0xcc>)
 800036c:	2201      	movs	r2, #1
 800036e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000370:	4b25      	ldr	r3, [pc, #148]	; (8000408 <MX_ADC2_Init+0xcc>)
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000378:	4b23      	ldr	r3, [pc, #140]	; (8000408 <MX_ADC2_Init+0xcc>)
 800037a:	2200      	movs	r2, #0
 800037c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037e:	4b22      	ldr	r3, [pc, #136]	; (8000408 <MX_ADC2_Init+0xcc>)
 8000380:	2201      	movs	r2, #1
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000384:	4b20      	ldr	r3, [pc, #128]	; (8000408 <MX_ADC2_Init+0xcc>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <MX_ADC2_Init+0xcc>)
 800038c:	2202      	movs	r2, #2
 800038e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_ADC2_Init+0xcc>)
 8000392:	2200      	movs	r2, #0
 8000394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_ADC2_Init+0xcc>)
 800039a:	2204      	movs	r2, #4
 800039c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_ADC2_Init+0xcc>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_ADC2_Init+0xcc>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003aa:	4817      	ldr	r0, [pc, #92]	; (8000408 <MX_ADC2_Init+0xcc>)
 80003ac:	f000 ff8a 	bl	80012c4 <HAL_ADC_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80003b6:	f000 fbb5 	bl	8000b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003be:	2301      	movs	r3, #1
 80003c0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003d2:	463b      	mov	r3, r7
 80003d4:	4619      	mov	r1, r3
 80003d6:	480c      	ldr	r0, [pc, #48]	; (8000408 <MX_ADC2_Init+0xcc>)
 80003d8:	f001 f954 	bl	8001684 <HAL_ADC_ConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80003e2:	f000 fb9f 	bl	8000b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ea:	463b      	mov	r3, r7
 80003ec:	4619      	mov	r1, r3
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <MX_ADC2_Init+0xcc>)
 80003f0:	f001 f948 	bl	8001684 <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80003fa:	f000 fb93 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000028 	.word	0x20000028
 800040c:	50000100 	.word	0x50000100

08000410 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b08a      	sub	sp, #40	; 0x28
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000416:	f107 031c 	add.w	r3, r7, #28
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
 8000430:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000434:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <MX_ADC3_Init+0xdc>)
 8000436:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000438:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <MX_ADC3_Init+0xd8>)
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800043e:	4b2a      	ldr	r3, [pc, #168]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <MX_ADC3_Init+0xd8>)
 800044c:	2200      	movs	r2, #0
 800044e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000450:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000452:	2200      	movs	r2, #0
 8000454:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000458:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <MX_ADC3_Init+0xd8>)
 800045a:	2200      	movs	r2, #0
 800045c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000460:	2201      	movs	r2, #1
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800046a:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <MX_ADC3_Init+0xd8>)
 800046c:	2201      	movs	r2, #1
 800046e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000472:	2200      	movs	r2, #0
 8000474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_ADC3_Init+0xd8>)
 800047a:	2204      	movs	r2, #4
 800047c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000480:	2200      	movs	r2, #0
 8000482:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_ADC3_Init+0xd8>)
 8000486:	2200      	movs	r2, #0
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800048a:	4817      	ldr	r0, [pc, #92]	; (80004e8 <MX_ADC3_Init+0xd8>)
 800048c:	f000 ff1a 	bl	80012c4 <HAL_ADC_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000496:	f000 fb45 	bl	8000b24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800049e:	f107 031c 	add.w	r3, r7, #28
 80004a2:	4619      	mov	r1, r3
 80004a4:	4810      	ldr	r0, [pc, #64]	; (80004e8 <MX_ADC3_Init+0xd8>)
 80004a6:	f001 fbd9 	bl	8001c5c <HAL_ADCEx_MultiModeConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80004b0:	f000 fb38 	bl	8000b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004b4:	230c      	movs	r3, #12
 80004b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004b8:	2301      	movs	r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_ADC3_Init+0xd8>)
 80004d2:	f001 f8d7 	bl	8001684 <HAL_ADC_ConfigChannel>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80004dc:	f000 fb22 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3728      	adds	r7, #40	; 0x28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000078 	.word	0x20000078
 80004ec:	50000400 	.word	0x50000400

080004f0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN_Init+0x60>)
 80004f6:	4a17      	ldr	r2, [pc, #92]	; (8000554 <MX_CAN_Init+0x64>)
 80004f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_CAN_Init+0x60>)
 80004fc:	2210      	movs	r2, #16
 80004fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN_Init+0x60>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_CAN_Init+0x60>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_CAN_Init+0x60>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN_Init+0x60>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN_Init+0x60>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN_Init+0x60>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN_Init+0x60>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN_Init+0x60>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN_Init+0x60>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN_Init+0x60>)
 800053e:	f001 fce5 	bl	8001f0c <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000548:	f000 faec 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200000c8 	.word	0x200000c8
 8000554:	40006400 	.word	0x40006400

08000558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_I2C1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <MX_I2C1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_I2C1_Init+0x74>)
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <MX_I2C1_Init+0x7c>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_I2C1_Init+0x74>)
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <MX_I2C1_Init+0x74>)
 8000594:	f002 f85a 	bl	800264c <HAL_I2C_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059e:	f000 fac1 	bl	8000b24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <MX_I2C1_Init+0x74>)
 80005a6:	f002 f8e0 	bl	800276a <HAL_I2CEx_ConfigAnalogFilter>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 fab8 	bl	8000b24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_I2C1_Init+0x74>)
 80005b8:	f002 f922 	bl	8002800 <HAL_I2CEx_ConfigDigitalFilter>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 faaf 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000f0 	.word	0x200000f0
 80005d0:	40005400 	.word	0x40005400
 80005d4:	2000090e 	.word	0x2000090e

080005d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_SPI2_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <MX_SPI2_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_SPI2_Init+0x74>)
 80005e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_SPI2_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_SPI2_Init+0x74>)
 80005f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_SPI2_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_SPI2_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_SPI2_Init+0x74>)
 8000606:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800060a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_SPI2_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_SPI2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_SPI2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_SPI2_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_SPI2_Init+0x74>)
 8000626:	2207      	movs	r2, #7
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_SPI2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_SPI2_Init+0x74>)
 8000632:	2208      	movs	r2, #8
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_SPI2_Init+0x74>)
 8000638:	f003 fd54 	bl	80040e4 <HAL_SPI_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa6f 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000013c 	.word	0x2000013c
 8000650:	40003800 	.word	0x40003800

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	222c      	movs	r2, #44	; 0x2c
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f005 f977 	bl	8005974 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000686:	4b39      	ldr	r3, [pc, #228]	; (800076c <MX_TIM1_Init+0x118>)
 8000688:	4a39      	ldr	r2, [pc, #228]	; (8000770 <MX_TIM1_Init+0x11c>)
 800068a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800068c:	4b37      	ldr	r3, [pc, #220]	; (800076c <MX_TIM1_Init+0x118>)
 800068e:	2231      	movs	r2, #49	; 0x31
 8000690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b36      	ldr	r3, [pc, #216]	; (800076c <MX_TIM1_Init+0x118>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <MX_TIM1_Init+0x118>)
 800069a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800069e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b32      	ldr	r3, [pc, #200]	; (800076c <MX_TIM1_Init+0x118>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <MX_TIM1_Init+0x118>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b2f      	ldr	r3, [pc, #188]	; (800076c <MX_TIM1_Init+0x118>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b2:	482e      	ldr	r0, [pc, #184]	; (800076c <MX_TIM1_Init+0x118>)
 80006b4:	f003 fdc1 	bl	800423a <HAL_TIM_PWM_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fa31 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006d2:	4619      	mov	r1, r3
 80006d4:	4825      	ldr	r0, [pc, #148]	; (800076c <MX_TIM1_Init+0x118>)
 80006d6:	f004 fbd3 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 fa20 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e4:	2360      	movs	r3, #96	; 0x60
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <MX_TIM1_Init+0x118>)
 800070a:	f003 ff0d 	bl	8004528 <HAL_TIM_PWM_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000714:	f000 fa06 	bl	8000b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800072c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000730:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800073a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <MX_TIM1_Init+0x118>)
 800074e:	f004 fc17 	bl	8004f80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000758:	f000 f9e4 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <MX_TIM1_Init+0x118>)
 800075e:	f000 fb95 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000762:	bf00      	nop
 8000764:	3758      	adds	r7, #88	; 0x58
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001a0 	.word	0x200001a0
 8000770:	40012c00 	.word	0x40012c00

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_TIM2_Init+0xb0>)
 800079a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_TIM2_Init+0xb0>)
 80007a2:	2231      	movs	r2, #49	; 0x31
 80007a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_TIM2_Init+0xb0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_TIM2_Init+0xb0>)
 80007ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_TIM2_Init+0xb0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_TIM2_Init+0xb0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c0:	4818      	ldr	r0, [pc, #96]	; (8000824 <MX_TIM2_Init+0xb0>)
 80007c2:	f003 fd3a 	bl	800423a <HAL_TIM_PWM_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007cc:	f000 f9aa 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <MX_TIM2_Init+0xb0>)
 80007e0:	f004 fb4e 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007ea:	f000 f99b 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ee:	2360      	movs	r3, #96	; 0x60
 80007f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2208      	movs	r2, #8
 8000802:	4619      	mov	r1, r3
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <MX_TIM2_Init+0xb0>)
 8000806:	f003 fe8f 	bl	8004528 <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000810:	f000 f988 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <MX_TIM2_Init+0xb0>)
 8000816:	f000 fb39 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001ec 	.word	0x200001ec

08000828 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_UART4_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_UART4_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_UART4_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_UART4_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_UART4_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_UART4_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_UART4_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_UART4_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_UART4_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_UART4_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_UART4_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_UART4_Init+0x58>)
 800086c:	f004 fc24 	bl	80050b8 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f955 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000238 	.word	0x20000238
 8000884:	40004c00 	.word	0x40004c00

08000888 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_UART5_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_UART5_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_UART5_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_UART5_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_UART5_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_UART5_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_UART5_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_UART5_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_UART5_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_UART5_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_UART5_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_UART5_Init+0x58>)
 80008cc:	f004 fbf4 	bl	80050b8 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f925 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200002bc 	.word	0x200002bc
 80008e4:	40005000 	.word	0x40005000

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <MX_USART2_UART_Init+0x60>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 80008f4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800092a:	2300      	movs	r3, #0
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 8000932:	f004 ff94 	bl	800585e <HAL_RS485Ex_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800093c:	f000 f8f2 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000340 	.word	0x20000340
 8000948:	40004400 	.word	0x40004400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b6c      	ldr	r3, [pc, #432]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a6b      	ldr	r2, [pc, #428]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b69      	ldr	r3, [pc, #420]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097a:	4b66      	ldr	r3, [pc, #408]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a65      	ldr	r2, [pc, #404]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b63      	ldr	r3, [pc, #396]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b60      	ldr	r3, [pc, #384]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a5f      	ldr	r2, [pc, #380]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b5d      	ldr	r3, [pc, #372]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b5a      	ldr	r3, [pc, #360]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a59      	ldr	r2, [pc, #356]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 80009b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a53      	ldr	r2, [pc, #332]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 80009c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OK_DRV_EN_Pin|EN_OK_Pin|ENC2_SELECT_Pin|FAULT_LED_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	21c3      	movs	r1, #195	; 0xc3
 80009de:	484e      	ldr	r0, [pc, #312]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 80009e0:	f001 fe1c 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOFT_START_RELAY_GPIO_Port, SOFT_START_RELAY_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2108      	movs	r1, #8
 80009e8:	484b      	ldr	r0, [pc, #300]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 80009ea:	f001 fe17 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2110      	movs	r1, #16
 80009f2:	484a      	ldr	r0, [pc, #296]	; (8000b1c <MX_GPIO_Init+0x1d0>)
 80009f4:	f001 fe12 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TMC_OK_LED_Pin|RST_TMC_Pin|EN_TMC_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f001 fe0b 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EM_BRAKE_GPIO_Port, EM_BRAKE_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0c:	4844      	ldr	r0, [pc, #272]	; (8000b20 <MX_GPIO_Init+0x1d4>)
 8000a0e:	f001 fe05 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAN_SPEED_FB_Pin OCD_INPUT_Pin */
  GPIO_InitStruct.Pin = FAN_SPEED_FB_Pin|OCD_INPUT_Pin;
 8000a12:	f244 0304 	movw	r3, #16388	; 0x4004
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	483c      	ldr	r0, [pc, #240]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 8000a28:	f001 fc7e 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : OVP_INPUT_Pin */
  GPIO_InitStruct.Pin = OVP_INPUT_Pin;
 8000a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OVP_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4835      	ldr	r0, [pc, #212]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 8000a44:	f001 fc70 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : OK_DRV_EN_Pin EN_OK_Pin ENC2_SELECT_Pin FAULT_LED_Pin */
  GPIO_InitStruct.Pin = OK_DRV_EN_Pin|EN_OK_Pin|ENC2_SELECT_Pin|FAULT_LED_Pin;
 8000a48:	23c3      	movs	r3, #195	; 0xc3
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	482e      	ldr	r0, [pc, #184]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 8000a60:	f001 fc62 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOFT_START_RELAY_Pin */
  GPIO_InitStruct.Pin = SOFT_START_RELAY_Pin;
 8000a64:	2308      	movs	r3, #8
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a68:	2311      	movs	r3, #17
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SOFT_START_RELAY_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4827      	ldr	r0, [pc, #156]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 8000a7c:	f001 fc54 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RE_Pin */
  GPIO_InitStruct.Pin = USART2_RE_Pin;
 8000a80:	2301      	movs	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART2_RE_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f001 fc47 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	481a      	ldr	r0, [pc, #104]	; (8000b1c <MX_GPIO_Init+0x1d0>)
 8000ab2:	f001 fc39 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_OK_LED_Pin RST_TMC_Pin EN_TMC_Pin */
  GPIO_InitStruct.Pin = TMC_OK_LED_Pin|RST_TMC_Pin|EN_TMC_Pin;
 8000ab6:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f001 fc29 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : STO1_in_Pin STO2_in_Pin MAIN_ENABLE_Pin */
  GPIO_InitStruct.Pin = STO1_in_Pin|STO2_in_Pin|MAIN_ENABLE_Pin;
 8000ad6:	2326      	movs	r3, #38	; 0x26
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_GPIO_Init+0x1d4>)
 8000aea:	f001 fc1d 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : EM_BRAKE_Pin */
  GPIO_InitStruct.Pin = EM_BRAKE_Pin;
 8000aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EM_BRAKE_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <MX_GPIO_Init+0x1d4>)
 8000b08:	f001 fc0e 	bl	8002328 <HAL_GPIO_Init>

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	48001400 	.word	0x48001400
 8000b20:	48000400 	.word	0x48000400

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_MspInit+0x44>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_MspInit+0x44>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x44>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x44>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x44>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <HAL_ADC_MspInit+0xf8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d13d      	bne.n	8000c16 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b9a:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a35      	ldr	r2, [pc, #212]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PC4     ------> ADC2_IN5
    PC5     ------> ADC2_IN11
    */
    GPIO_InitStruct.Pin = NTC_HS2_Pin|NTC_HS1_Pin|NTC_PCB_Pin;
 8000be2:	2370      	movs	r3, #112	; 0x70
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f001 fb96 	bl	8002328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCLINK_MEAS_Pin|GPIO1_DIP_Pin;
 8000bfc:	2330      	movs	r3, #48	; 0x30
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481a      	ldr	r0, [pc, #104]	; (8000c78 <HAL_ADC_MspInit+0x100>)
 8000c10:	f001 fb8a 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c14:	e028      	b.n	8000c68 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <HAL_ADC_MspInit+0x104>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d123      	bne.n	8000c68 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000c26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c2a:	6153      	str	r3, [r2, #20]
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c42:	6153      	str	r3, [r2, #20]
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_ADC_MspInit+0xfc>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO2_CTRL_Pin;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIO2_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <HAL_ADC_MspInit+0x108>)
 8000c64:	f001 fb60 	bl	8002328 <HAL_GPIO_Init>
}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	; 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	50000100 	.word	0x50000100
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	50000400 	.word	0x50000400
 8000c80:	48000400 	.word	0x48000400

08000c84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_CAN_MspInit+0x7c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d128      	bne.n	8000cf8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_CAN_MspInit+0x80>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <HAL_CAN_MspInit+0x80>)
 8000cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb0:	61d3      	str	r3, [r2, #28]
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_CAN_MspInit+0x80>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_CAN_MspInit+0x80>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_CAN_MspInit+0x80>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_CAN_MspInit+0x80>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ce8:	2309      	movs	r3, #9
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_CAN_MspInit+0x84>)
 8000cf4:	f001 fb18 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	; 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40006400 	.word	0x40006400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_I2C_MspInit+0x7c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d127      	bne.n	8000d7e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_I2C_MspInit+0x80>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <HAL_I2C_MspInit+0x80>)
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	6153      	str	r3, [r2, #20]
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_I2C_MspInit+0x80>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d46:	23c0      	movs	r3, #192	; 0xc0
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4a:	2312      	movs	r3, #18
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d56:	2304      	movs	r3, #4
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <HAL_I2C_MspInit+0x84>)
 8000d62:	f001 fae1 	bl	8002328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_I2C_MspInit+0x80>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_I2C_MspInit+0x80>)
 8000d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_I2C_MspInit+0x80>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	48000400 	.word	0x48000400

08000d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_SPI_MspInit+0x7c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d128      	bne.n	8000e08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000de6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_SPI_MspInit+0x84>)
 8000e04:	f001 fa90 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40003800 	.word	0x40003800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_TIM_PWM_MspInit+0x68>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d114      	bne.n	8000e58 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8000e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	201b      	movs	r0, #27
 8000e4c:	f001 fa35 	bl	80022ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e50:	201b      	movs	r0, #27
 8000e52:	f001 fa4e 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e56:	e010      	b.n	8000e7a <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e60:	d10b      	bne.n	8000e7a <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40012c00 	.word	0x40012c00
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <HAL_TIM_MspPostInit+0xac>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11d      	bne.n	8000eea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <HAL_TIM_MspPostInit+0xb0>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_TIM_MspPostInit+0xb0>)
 8000eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_TIM_MspPostInit+0xb0>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4817      	ldr	r0, [pc, #92]	; (8000f40 <HAL_TIM_MspPostInit+0xb4>)
 8000ee4:	f001 fa20 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ee8:	e021      	b.n	8000f2e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef2:	d11c      	bne.n	8000f2e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_TIM_MspPostInit+0xb0>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_TIM_MspPostInit+0xb0>)
 8000efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efe:	6153      	str	r3, [r2, #20]
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_TIM_MspPostInit+0xb0>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <HAL_TIM_MspPostInit+0xb8>)
 8000f2a:	f001 f9fd 	bl	8002328 <HAL_GPIO_Init>
}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40012c00 	.word	0x40012c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000800 	.word	0x48000800
 8000f44:	48000400 	.word	0x48000400

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	; 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a54      	ldr	r2, [pc, #336]	; (80010b8 <HAL_UART_MspInit+0x170>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d129      	bne.n	8000fbe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f6a:	4b54      	ldr	r3, [pc, #336]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a53      	ldr	r2, [pc, #332]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000f70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f7e:	623b      	str	r3, [r7, #32]
 8000f80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a4d      	ldr	r2, [pc, #308]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000f88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f8c:	6153      	str	r3, [r2, #20]
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000fac:	2305      	movs	r3, #5
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4842      	ldr	r0, [pc, #264]	; (80010c0 <HAL_UART_MspInit+0x178>)
 8000fb8:	f001 f9b6 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fbc:	e078      	b.n	80010b0 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==UART5)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a40      	ldr	r2, [pc, #256]	; (80010c4 <HAL_UART_MspInit+0x17c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d145      	bne.n	8001054 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4a3b      	ldr	r2, [pc, #236]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fd2:	61d3      	str	r3, [r2, #28]
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a35      	ldr	r2, [pc, #212]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000fe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fea:	6153      	str	r3, [r2, #20]
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <HAL_UART_MspInit+0x174>)
 8000ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001002:	6153      	str	r3, [r2, #20]
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_UART_MspInit+0x174>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001022:	2305      	movs	r3, #5
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4824      	ldr	r0, [pc, #144]	; (80010c0 <HAL_UART_MspInit+0x178>)
 800102e:	f001 f97b 	bl	8002328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001032:	2304      	movs	r3, #4
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001042:	2305      	movs	r3, #5
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	481e      	ldr	r0, [pc, #120]	; (80010c8 <HAL_UART_MspInit+0x180>)
 800104e:	f001 f96b 	bl	8002328 <HAL_GPIO_Init>
}
 8001052:	e02d      	b.n	80010b0 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_UART_MspInit+0x184>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d128      	bne.n	80010b0 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_UART_MspInit+0x174>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <HAL_UART_MspInit+0x174>)
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_UART_MspInit+0x174>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_UART_MspInit+0x174>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_UART_MspInit+0x174>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	6153      	str	r3, [r2, #20]
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_UART_MspInit+0x174>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800108e:	230e      	movs	r3, #14
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109e:	2307      	movs	r3, #7
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f001 f93c 	bl	8002328 <HAL_GPIO_Init>
}
 80010b0:	bf00      	nop
 80010b2:	3738      	adds	r7, #56	; 0x38
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40004c00 	.word	0x40004c00
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000800 	.word	0x48000800
 80010c4:	40005000 	.word	0x40005000
 80010c8:	48000c00 	.word	0x48000c00
 80010cc:	40004400 	.word	0x40004400

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <MemManage_Handler+0x4>

080010e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler+0x4>

080010ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f88e 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM1_CC_IRQHandler+0x10>)
 800112a:	f003 f8dd 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001a0 	.word	0x200001a0

08001138 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopForever+0x6>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopForever+0xe>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopForever+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001186:	f7ff ffd7 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f004 fbcf 	bl	800592c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118e:	f7ff f81b 	bl	80001c8 <main>

08001192 <LoopForever>:

LoopForever:
    b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001194:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a0:	080059dc 	.word	0x080059dc
  ldr r2, =_sbss
 80011a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011a8:	200003c8 	.word	0x200003c8

080011ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC1_2_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_Init+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_Init+0x28>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f001 f86f 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fcb0 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 f887 	bl	800230e <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f001 f84f 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	200003c4 	.word	0x200003c4

08001264 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;  
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200003c4 	.word	0x200003c4

0800127c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b09a      	sub	sp, #104	; 0x68
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e1c9      	b.n	8001678 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d176      	bne.n	80013e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d152      	bne.n	80013a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fc2d 	bl	8000b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d13b      	bne.n	80013a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fd87 	bl	8001e40 <ADC_Disable>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d12f      	bne.n	80013a4 <HAL_ADC_Init+0xe0>
 8001344:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001348:	2b00      	cmp	r3, #0
 800134a:	d12b      	bne.n	80013a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001354:	f023 0302 	bic.w	r3, r3, #2
 8001358:	f043 0202 	orr.w	r2, r3, #2
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800136e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001380:	4b86      	ldr	r3, [pc, #536]	; (800159c <HAL_ADC_Init+0x2d8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a86      	ldr	r2, [pc, #536]	; (80015a0 <HAL_ADC_Init+0x2dc>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9a      	lsrs	r2, r3, #18
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001396:	e002      	b.n	800139e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	3b01      	subs	r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f9      	bne.n	8001398 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013c0:	d110      	bne.n	80013e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f023 0312 	bic.w	r3, r3, #18
 80013ca:	f043 0210 	orr.w	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 8136 	bne.w	800165e <HAL_ADC_Init+0x39a>
 80013f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 8131 	bne.w	800165e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 8129 	bne.w	800165e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001414:	f043 0202 	orr.w	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001424:	d004      	beq.n	8001430 <HAL_ADC_Init+0x16c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a5e      	ldr	r2, [pc, #376]	; (80015a4 <HAL_ADC_Init+0x2e0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_ADC_Init+0x170>
 8001430:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <HAL_ADC_Init+0x2e4>)
 8001432:	e000      	b.n	8001436 <HAL_ADC_Init+0x172>
 8001434:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_ADC_Init+0x2e8>)
 8001436:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001440:	d102      	bne.n	8001448 <HAL_ADC_Init+0x184>
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <HAL_ADC_Init+0x2e0>)
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e01a      	b.n	800147e <HAL_ADC_Init+0x1ba>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_ADC_Init+0x2e0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d103      	bne.n	800145a <HAL_ADC_Init+0x196>
 8001452:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e011      	b.n	800147e <HAL_ADC_Init+0x1ba>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_ADC_Init+0x2ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d102      	bne.n	800146a <HAL_ADC_Init+0x1a6>
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_ADC_Init+0x2f0>)
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e009      	b.n	800147e <HAL_ADC_Init+0x1ba>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a51      	ldr	r2, [pc, #324]	; (80015b4 <HAL_ADC_Init+0x2f0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d102      	bne.n	800147a <HAL_ADC_Init+0x1b6>
 8001474:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <HAL_ADC_Init+0x2ec>)
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e001      	b.n	800147e <HAL_ADC_Init+0x1ba>
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_ADC_Init+0x1da>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_ADC_Init+0x1da>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_ADC_Init+0x1dc>
 800149e:	2300      	movs	r3, #0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d11c      	bne.n	80014de <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d010      	beq.n	80014cc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_ADC_Init+0x202>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Init+0x202>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_ADC_Init+0x204>
 80014c6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d108      	bne.n	80014de <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80014cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	431a      	orrs	r2, r3
 80014da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014dc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7e5b      	ldrb	r3, [r3, #25]
 80014e2:	035b      	lsls	r3, r3, #13
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014e8:	2a01      	cmp	r2, #1
 80014ea:	d002      	beq.n	80014f2 <HAL_ADC_Init+0x22e>
 80014ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f0:	e000      	b.n	80014f4 <HAL_ADC_Init+0x230>
 80014f2:	2200      	movs	r2, #0
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4313      	orrs	r3, r2
 8001502:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001504:	4313      	orrs	r3, r2
 8001506:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d11b      	bne.n	800154a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7e5b      	ldrb	r3, [r3, #25]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	3b01      	subs	r3, #1
 8001520:	045a      	lsls	r2, r3, #17
 8001522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001524:	4313      	orrs	r3, r2
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	663b      	str	r3, [r7, #96]	; 0x60
 800152c:	e00d      	b.n	800154a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001536:	f043 0220 	orr.w	r2, r3, #32
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	2b01      	cmp	r3, #1
 8001550:	d03a      	beq.n	80015c8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <HAL_ADC_Init+0x2ec>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d004      	beq.n	8001566 <HAL_ADC_Init+0x2a2>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_ADC_Init+0x2f0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d128      	bne.n	80015b8 <HAL_ADC_Init+0x2f4>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800156e:	d012      	beq.n	8001596 <HAL_ADC_Init+0x2d2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001578:	d00a      	beq.n	8001590 <HAL_ADC_Init+0x2cc>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001582:	d002      	beq.n	800158a <HAL_ADC_Init+0x2c6>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	e018      	b.n	80015bc <HAL_ADC_Init+0x2f8>
 800158a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158e:	e015      	b.n	80015bc <HAL_ADC_Init+0x2f8>
 8001590:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001594:	e012      	b.n	80015bc <HAL_ADC_Init+0x2f8>
 8001596:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800159a:	e00f      	b.n	80015bc <HAL_ADC_Init+0x2f8>
 800159c:	20000000 	.word	0x20000000
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	50000100 	.word	0x50000100
 80015a8:	50000300 	.word	0x50000300
 80015ac:	50000700 	.word	0x50000700
 80015b0:	50000400 	.word	0x50000400
 80015b4:	50000500 	.word	0x50000500
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015c0:	4313      	orrs	r3, r2
 80015c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015c4:	4313      	orrs	r3, r2
 80015c6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d114      	bne.n	8001600 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e4:	f023 0302 	bic.w	r3, r3, #2
 80015e8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7e1b      	ldrb	r3, [r3, #24]
 80015ee:	039a      	lsls	r2, r3, #14
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4313      	orrs	r3, r2
 80015fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015fc:	4313      	orrs	r3, r2
 80015fe:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_ADC_Init+0x3bc>)
 8001608:	4013      	ands	r3, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001610:	430b      	orrs	r3, r1
 8001612:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d10c      	bne.n	8001636 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f023 010f 	bic.w	r1, r3, #15
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
 8001634:	e007      	b.n	8001646 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 020f 	bic.w	r2, r2, #15
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f023 0303 	bic.w	r3, r3, #3
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
 800165c:	e00a      	b.n	8001674 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f023 0312 	bic.w	r3, r3, #18
 8001666:	f043 0210 	orr.w	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001674:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001678:	4618      	mov	r0, r3
 800167a:	3768      	adds	r7, #104	; 0x68
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	fff0c007 	.word	0xfff0c007

08001684 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001684:	b480      	push	{r7}
 8001686:	b09b      	sub	sp, #108	; 0x6c
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x22>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e2ca      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x5b8>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f040 82ae 	bne.w	8001c1a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d81c      	bhi.n	8001700 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	461a      	mov	r2, r3
 80016da:	231f      	movs	r3, #31
 80016dc:	4093      	lsls	r3, r2
 80016de:	43db      	mvns	r3, r3
 80016e0:	4019      	ands	r1, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa00 f203 	lsl.w	r2, r0, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
 80016fe:	e063      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d81e      	bhi.n	8001746 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	3b1e      	subs	r3, #30
 800171c:	221f      	movs	r2, #31
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	4019      	ands	r1, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	3b1e      	subs	r3, #30
 8001738:	fa00 f203 	lsl.w	r2, r0, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	635a      	str	r2, [r3, #52]	; 0x34
 8001744:	e040      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b0e      	cmp	r3, #14
 800174c:	d81e      	bhi.n	800178c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	3b3c      	subs	r3, #60	; 0x3c
 8001762:	221f      	movs	r2, #31
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	4019      	ands	r1, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	3b3c      	subs	r3, #60	; 0x3c
 800177e:	fa00 f203 	lsl.w	r2, r0, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
 800178a:	e01d      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	3b5a      	subs	r3, #90	; 0x5a
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4019      	ands	r1, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	3b5a      	subs	r3, #90	; 0x5a
 80017bc:	fa00 f203 	lsl.w	r2, r0, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 80e5 	bne.w	80019a2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d91c      	bls.n	800181a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6999      	ldr	r1, [r3, #24]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	3b1e      	subs	r3, #30
 80017f2:	2207      	movs	r2, #7
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6898      	ldr	r0, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	3b1e      	subs	r3, #30
 800180c:	fa00 f203 	lsl.w	r2, r0, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	619a      	str	r2, [r3, #24]
 8001818:	e019      	b.n	800184e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6959      	ldr	r1, [r3, #20]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	2207      	movs	r2, #7
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6898      	ldr	r0, [r3, #8]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	fa00 f203 	lsl.w	r2, r0, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	3b01      	subs	r3, #1
 800186c:	2b03      	cmp	r3, #3
 800186e:	d84f      	bhi.n	8001910 <HAL_ADC_ConfigChannel+0x28c>
 8001870:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <HAL_ADC_ConfigChannel+0x1f4>)
 8001872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001876:	bf00      	nop
 8001878:	08001889 	.word	0x08001889
 800187c:	080018ab 	.word	0x080018ab
 8001880:	080018cd 	.word	0x080018cd
 8001884:	080018ef 	.word	0x080018ef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800188e:	4b9a      	ldr	r3, [pc, #616]	; (8001af8 <HAL_ADC_ConfigChannel+0x474>)
 8001890:	4013      	ands	r3, r2
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	0691      	lsls	r1, r2, #26
 8001898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800189a:	430a      	orrs	r2, r1
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018a6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018a8:	e07e      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018b0:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <HAL_ADC_ConfigChannel+0x474>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	0691      	lsls	r1, r2, #26
 80018ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018bc:	430a      	orrs	r2, r1
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018c8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ca:	e06d      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <HAL_ADC_ConfigChannel+0x474>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	0691      	lsls	r1, r2, #26
 80018dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018de:	430a      	orrs	r2, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ec:	e05c      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018f4:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <HAL_ADC_ConfigChannel+0x474>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	0691      	lsls	r1, r2, #26
 80018fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001900:	430a      	orrs	r2, r1
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800190c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800190e:	e04b      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	069b      	lsls	r3, r3, #26
 8001920:	429a      	cmp	r2, r3
 8001922:	d107      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001932:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800193a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	069b      	lsls	r3, r3, #26
 8001944:	429a      	cmp	r2, r3
 8001946:	d107      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001956:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800195e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	069b      	lsls	r3, r3, #26
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800197a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	069b      	lsls	r3, r3, #26
 800198c:	429a      	cmp	r2, r3
 800198e:	d10a      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800199e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019a0:	e001      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019a2:	bf00      	nop
 80019a4:	e000      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019a6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x344>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x344>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_ADC_ConfigChannel+0x346>
 80019c8:	2300      	movs	r3, #0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 8130 	bne.w	8001c30 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d00f      	beq.n	80019f8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019f6:	e049      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b09      	cmp	r3, #9
 8001a18:	d91c      	bls.n	8001a54 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6999      	ldr	r1, [r3, #24]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b1b      	subs	r3, #27
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	4019      	ands	r1, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6898      	ldr	r0, [r3, #8]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	3b1b      	subs	r3, #27
 8001a46:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	619a      	str	r2, [r3, #24]
 8001a52:	e01b      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6959      	ldr	r1, [r3, #20]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	2207      	movs	r2, #7
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4019      	ands	r1, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6898      	ldr	r0, [r3, #8]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	fa00 f203 	lsl.w	r2, r0, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a94:	d004      	beq.n	8001aa0 <HAL_ADC_ConfigChannel+0x41c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_ADC_ConfigChannel+0x478>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x420>
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_ADC_ConfigChannel+0x47c>)
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x422>
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_ADC_ConfigChannel+0x480>)
 8001aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d105      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d015      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ac0:	2b11      	cmp	r3, #17
 8001ac2:	d105      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ad4:	2b12      	cmp	r3, #18
 8001ad6:	f040 80ab 	bne.w	8001c30 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80a4 	bne.w	8001c30 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af0:	d10a      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x484>
 8001af2:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_ADC_ConfigChannel+0x478>)
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e022      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x4ba>
 8001af8:	83fff000 	.word	0x83fff000
 8001afc:	50000100 	.word	0x50000100
 8001b00:	50000300 	.word	0x50000300
 8001b04:	50000700 	.word	0x50000700
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4e      	ldr	r2, [pc, #312]	; (8001c48 <HAL_ADC_ConfigChannel+0x5c4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d103      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x496>
 8001b12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e011      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x4ba>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d102      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x4a6>
 8001b24:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e009      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x4ba>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a48      	ldr	r2, [pc, #288]	; (8001c50 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d102      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x4b6>
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e001      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x4ba>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d108      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x4da>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x4da>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4dc>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d150      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b64:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d010      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x502>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x502>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x504>
 8001b86:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d13c      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d11d      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x54c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9c:	d118      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_ADC_ConfigChannel+0x5d0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	0c9a      	lsrs	r2, r3, #18
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bce:	e02e      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b11      	cmp	r3, #17
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x56c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be0:	d106      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bee:	e01e      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d11a      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c02:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c04:	e013      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f043 0220 	orr.w	r2, r3, #32
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c18:	e00a      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f043 0220 	orr.w	r2, r3, #32
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c2e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	376c      	adds	r7, #108	; 0x6c
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	50000100 	.word	0x50000100
 8001c4c:	50000400 	.word	0x50000400
 8001c50:	50000500 	.word	0x50000500
 8001c54:	20000000 	.word	0x20000000
 8001c58:	431bde83 	.word	0x431bde83

08001c5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b099      	sub	sp, #100	; 0x64
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c74:	d102      	bne.n	8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c76:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	e01a      	b.n	8001cb2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6a      	ldr	r2, [pc, #424]	; (8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d103      	bne.n	8001c8e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001c86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	e011      	b.n	8001cb2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a67      	ldr	r2, [pc, #412]	; (8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d102      	bne.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c98:	4b66      	ldr	r3, [pc, #408]	; (8001e34 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	e009      	b.n	8001cb2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a64      	ldr	r2, [pc, #400]	; (8001e34 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d102      	bne.n	8001cae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ca8:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	e001      	b.n	8001cb2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b0      	b.n	8001e1e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0a9      	b.n	8001e1e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 808d 	bne.w	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 8086 	bne.w	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d04:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d06:	e000      	b.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d08:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d0a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d040      	beq.n	8001d96 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d26:	035b      	lsls	r3, r3, #13
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d2e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d50:	2300      	movs	r3, #0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d15c      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d72:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d14b      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d80:	f023 030f 	bic.w	r3, r3, #15
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	6811      	ldr	r1, [r2, #0]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	6892      	ldr	r2, [r2, #8]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d92:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d94:	e03c      	b.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001da0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d123      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001de4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d112      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001df2:	f023 030f 	bic.w	r3, r3, #15
 8001df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001df8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dfa:	e009      	b.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f043 0220 	orr.w	r2, r3, #32
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e0e:	e000      	b.n	8001e12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e10:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3764      	adds	r7, #100	; 0x64
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	50000100 	.word	0x50000100
 8001e30:	50000400 	.word	0x50000400
 8001e34:	50000500 	.word	0x50000500
 8001e38:	50000300 	.word	0x50000300
 8001e3c:	50000700 	.word	0x50000700

08001e40 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <ADC_Disable+0x2c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <ADC_Disable+0x2c>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <ADC_Disable+0x2e>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d047      	beq.n	8001f02 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030d 	and.w	r3, r3, #13
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10f      	bne.n	8001ea0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0202 	orr.w	r2, r2, #2
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2203      	movs	r2, #3
 8001e96:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e98:	f7ff f9e4 	bl	8001264 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e9e:	e029      	b.n	8001ef4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f043 0210 	orr.w	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e023      	b.n	8001f04 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ebc:	f7ff f9d2 	bl	8001264 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d914      	bls.n	8001ef4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10d      	bne.n	8001ef4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f043 0210 	orr.w	r2, r3, #16
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e007      	b.n	8001f04 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d0dc      	beq.n	8001ebc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0ed      	b.n	80020fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe feaa 	bl	8000c84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f40:	f7ff f990 	bl	8001264 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f46:	e012      	b.n	8001f6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f48:	f7ff f98c 	bl	8001264 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b0a      	cmp	r3, #10
 8001f54:	d90b      	bls.n	8001f6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2205      	movs	r2, #5
 8001f66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0c5      	b.n	80020fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0e5      	beq.n	8001f48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0202 	bic.w	r2, r2, #2
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f8c:	f7ff f96a 	bl	8001264 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f92:	e012      	b.n	8001fba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f94:	f7ff f966 	bl	8001264 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b0a      	cmp	r3, #10
 8001fa0:	d90b      	bls.n	8001fba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2205      	movs	r2, #5
 8001fb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e09f      	b.n	80020fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e5      	bne.n	8001f94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7e1b      	ldrb	r3, [r3, #24]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d108      	bne.n	8001fe2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e007      	b.n	8001ff2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7e5b      	ldrb	r3, [r3, #25]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e007      	b.n	800201c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7e9b      	ldrb	r3, [r3, #26]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d108      	bne.n	8002036 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0220 	orr.w	r2, r2, #32
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e007      	b.n	8002046 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0220 	bic.w	r2, r2, #32
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7edb      	ldrb	r3, [r3, #27]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d108      	bne.n	8002060 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0210 	bic.w	r2, r2, #16
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e007      	b.n	8002070 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0210 	orr.w	r2, r2, #16
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7f1b      	ldrb	r3, [r3, #28]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d108      	bne.n	800208a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0208 	orr.w	r2, r2, #8
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e007      	b.n	800209a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0208 	bic.w	r2, r2, #8
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7f5b      	ldrb	r3, [r3, #29]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0204 	orr.w	r2, r2, #4
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e007      	b.n	80020c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	ea42 0103 	orr.w	r1, r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	1e5a      	subs	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002120:	4013      	ands	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800212c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <__NVIC_GetPriorityGrouping+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db0b      	blt.n	8002192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4907      	ldr	r1, [pc, #28]	; (80021a0 <__NVIC_EnableIRQ+0x38>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2001      	movs	r0, #1
 800218a:	fa00 f202 	lsl.w	r2, r0, r2
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	; (80021f0 <__NVIC_SetPriority+0x4c>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4908      	ldr	r1, [pc, #32]	; (80021f4 <__NVIC_SetPriority+0x50>)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3b04      	subs	r3, #4
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002240:	f04f 31ff 	mov.w	r1, #4294967295
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43d9      	mvns	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	4313      	orrs	r3, r2
         );
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff8e 	bl	80021a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff29 	bl	8002104 <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff3e 	bl	800214c <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff8e 	bl	80021f8 <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5d 	bl	80021a4 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff31 	bl	8002168 <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffa2 	bl	8002260 <SysTick_Config>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002336:	e154      	b.n	80025e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8146 	beq.w	80025dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d005      	beq.n	8002368 <HAL_GPIO_Init+0x40>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d130      	bne.n	80023ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239e:	2201      	movs	r2, #1
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 0201 	and.w	r2, r3, #1
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d017      	beq.n	8002406 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d123      	bne.n	800245a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	220f      	movs	r2, #15
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	6939      	ldr	r1, [r7, #16]
 8002456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0203 	and.w	r2, r3, #3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80a0 	beq.w	80025dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249c:	4b58      	ldr	r3, [pc, #352]	; (8002600 <HAL_GPIO_Init+0x2d8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a57      	ldr	r2, [pc, #348]	; (8002600 <HAL_GPIO_Init+0x2d8>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b55      	ldr	r3, [pc, #340]	; (8002600 <HAL_GPIO_Init+0x2d8>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024b4:	4a53      	ldr	r2, [pc, #332]	; (8002604 <HAL_GPIO_Init+0x2dc>)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024de:	d019      	beq.n	8002514 <HAL_GPIO_Init+0x1ec>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_GPIO_Init+0x2e0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d013      	beq.n	8002510 <HAL_GPIO_Init+0x1e8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a48      	ldr	r2, [pc, #288]	; (800260c <HAL_GPIO_Init+0x2e4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00d      	beq.n	800250c <HAL_GPIO_Init+0x1e4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_GPIO_Init+0x2e8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d007      	beq.n	8002508 <HAL_GPIO_Init+0x1e0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a46      	ldr	r2, [pc, #280]	; (8002614 <HAL_GPIO_Init+0x2ec>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d101      	bne.n	8002504 <HAL_GPIO_Init+0x1dc>
 8002500:	2304      	movs	r3, #4
 8002502:	e008      	b.n	8002516 <HAL_GPIO_Init+0x1ee>
 8002504:	2305      	movs	r3, #5
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x1ee>
 8002508:	2303      	movs	r3, #3
 800250a:	e004      	b.n	8002516 <HAL_GPIO_Init+0x1ee>
 800250c:	2302      	movs	r3, #2
 800250e:	e002      	b.n	8002516 <HAL_GPIO_Init+0x1ee>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_GPIO_Init+0x1ee>
 8002514:	2300      	movs	r3, #0
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	f002 0203 	and.w	r2, r2, #3
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	4093      	lsls	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002526:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x2dc>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_GPIO_Init+0x2f0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002558:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <HAL_GPIO_Init+0x2f0>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800255e:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <HAL_GPIO_Init+0x2f0>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002582:	4a25      	ldr	r2, [pc, #148]	; (8002618 <HAL_GPIO_Init+0x2f0>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_GPIO_Init+0x2f0>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025ac:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_GPIO_Init+0x2f0>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_GPIO_Init+0x2f0>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_GPIO_Init+0x2f0>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f aea3 	bne.w	8002338 <HAL_GPIO_Init+0x10>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	48000400 	.word	0x48000400
 800260c:	48000800 	.word	0x48000800
 8002610:	48000c00 	.word	0x48000c00
 8002614:	48001000 	.word	0x48001000
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002638:	e002      	b.n	8002640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e081      	b.n	8002762 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fb4a 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800269c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	e006      	b.n	80026d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d104      	bne.n	80026e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002708:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69d9      	ldr	r1, [r3, #28]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b20      	cmp	r3, #32
 800277e:	d138      	bne.n	80027f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800278a:	2302      	movs	r3, #2
 800278c:	e032      	b.n	80027f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2224      	movs	r2, #36	; 0x24
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	d139      	bne.n	800288a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002820:	2302      	movs	r3, #2
 8002822:	e033      	b.n	800288c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002852:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800289e:	af00      	add	r7, sp, #0
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f001 b823 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 817d 	beq.w	8002bce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028d4:	4bbc      	ldr	r3, [pc, #752]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d00c      	beq.n	80028fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028e0:	4bb9      	ldr	r3, [pc, #740]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d15c      	bne.n	80029a6 <HAL_RCC_OscConfig+0x10e>
 80028ec:	4bb6      	ldr	r3, [pc, #728]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d155      	bne.n	80029a6 <HAL_RCC_OscConfig+0x10e>
 80028fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800290e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_RCC_OscConfig+0x94>
 8002926:	4ba8      	ldr	r3, [pc, #672]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	e015      	b.n	8002958 <HAL_RCC_OscConfig+0xc0>
 800292c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002930:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002944:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002948:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002954:	4b9c      	ldr	r3, [pc, #624]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800295c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002960:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002964:	fa92 f2a2 	rbit	r2, r2
 8002968:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800296c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f042 0220 	orr.w	r2, r2, #32
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f002 021f 	and.w	r2, r2, #31
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 811f 	beq.w	8002bcc <HAL_RCC_OscConfig+0x334>
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 8116 	bne.w	8002bcc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f000 bfaf 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x12e>
 80029b8:	4b83      	ldr	r3, [pc, #524]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a82      	ldr	r2, [pc, #520]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e036      	b.n	8002a34 <HAL_RCC_OscConfig+0x19c>
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x158>
 80029d6:	4b7c      	ldr	r3, [pc, #496]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7b      	ldr	r2, [pc, #492]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a78      	ldr	r2, [pc, #480]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e021      	b.n	8002a34 <HAL_RCC_OscConfig+0x19c>
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x184>
 8002a02:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a70      	ldr	r2, [pc, #448]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6d      	ldr	r2, [pc, #436]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0x19c>
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a69      	ldr	r2, [pc, #420]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a66      	ldr	r2, [pc, #408]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a34:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f023 020f 	bic.w	r2, r3, #15
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	495f      	ldr	r1, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d059      	beq.n	8002b12 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fc01 	bl	8001264 <HAL_GetTick>
 8002a62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe fbfc 	bl	8001264 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b64      	cmp	r3, #100	; 0x64
 8002a76:	d902      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	f000 bf43 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>
 8002a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a82:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x218>
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e015      	b.n	8002adc <HAL_RCC_OscConfig+0x244>
 8002ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002acc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ae0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ae4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ae8:	fa92 f2a2 	rbit	r2, r2
 8002aec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002af0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002af4:	fab2 f282 	clz	r2, r2
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f042 0220 	orr.w	r2, r2, #32
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f002 021f 	and.w	r2, r2, #31
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ab      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1d0>
 8002b10:	e05d      	b.n	8002bce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe fba7 	bl	8001264 <HAL_GetTick>
 8002b16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fba2 	bl	8001264 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	; 0x64
 8002b2a:	d902      	bls.n	8002b32 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	f000 bee9 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>
 8002b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b36:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d102      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2cc>
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	e015      	b.n	8002b90 <HAL_RCC_OscConfig+0x2f8>
 8002b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b68:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b80:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b94:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b98:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ba4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	f042 0220 	orr.w	r2, r2, #32
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f002 021f 	and.w	r2, r2, #31
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ab      	bne.n	8002b1c <HAL_RCC_OscConfig+0x284>
 8002bc4:	e003      	b.n	8002bce <HAL_RCC_OscConfig+0x336>
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 817d 	beq.w	8002ede <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002be4:	4ba6      	ldr	r3, [pc, #664]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00b      	beq.n	8002c08 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bf0:	4ba3      	ldr	r3, [pc, #652]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d172      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x44a>
 8002bfc:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d16c      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x44a>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d102      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3a0>
 8002c32:	4b93      	ldr	r3, [pc, #588]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	e013      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c8>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c5c:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2202      	movs	r2, #2
 8002c62:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c66:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c6a:	fa92 f2a2 	rbit	r2, r2
 8002c6e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c72:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c76:	fab2 f282 	clz	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f042 0220 	orr.w	r2, r2, #32
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f002 021f 	and.w	r2, r2, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x410>
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f000 be2e 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	21f8      	movs	r1, #248	; 0xf8
 8002cbe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cc6:	fa91 f1a1 	rbit	r1, r1
 8002cca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002cce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002cd2:	fab1 f181 	clz	r1, r1
 8002cd6:	b2c9      	uxtb	r1, r1
 8002cd8:	408b      	lsls	r3, r1
 8002cda:	4969      	ldr	r1, [pc, #420]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce0:	e0fd      	b.n	8002ede <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8088 	beq.w	8002e04 <HAL_RCC_OscConfig+0x56c>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe faa0 	bl	8001264 <HAL_GetTick>
 8002d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fa9b 	bl	8001264 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d902      	bls.n	8002d40 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	f000 bde2 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>
 8002d40:	2302      	movs	r3, #2
 8002d42:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d102      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4d8>
 8002d6a:	4b45      	ldr	r3, [pc, #276]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	e013      	b.n	8002d98 <HAL_RCC_OscConfig+0x500>
 8002d70:	2302      	movs	r3, #2
 8002d72:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d82:	2302      	movs	r3, #2
 8002d84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d88:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d9e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002da2:	fa92 f2a2 	rbit	r2, r2
 8002da6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002daa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002dae:	fab2 f282 	clz	r2, r2
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f042 0220 	orr.w	r2, r2, #32
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	f002 021f 	and.w	r2, r2, #31
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0af      	beq.n	8002d2a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	21f8      	movs	r1, #248	; 0xf8
 8002de0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002de8:	fa91 f1a1 	rbit	r1, r1
 8002dec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002df0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002df4:	fab1 f181 	clz	r1, r1
 8002df8:	b2c9      	uxtb	r1, r1
 8002dfa:	408b      	lsls	r3, r1
 8002dfc:	4920      	ldr	r1, [pc, #128]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
 8002e02:	e06c      	b.n	8002ede <HAL_RCC_OscConfig+0x646>
 8002e04:	2301      	movs	r3, #1
 8002e06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe fa18 	bl	8001264 <HAL_GetTick>
 8002e34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fe fa13 	bl	8001264 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d902      	bls.n	8002e50 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	f000 bd5a 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>
 8002e50:	2302      	movs	r3, #2
 8002e52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d104      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5ec>
 8002e7a:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <HAL_RCC_OscConfig+0x5e8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e015      	b.n	8002eac <HAL_RCC_OscConfig+0x614>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	2302      	movs	r3, #2
 8002e86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ea8:	4bc8      	ldr	r3, [pc, #800]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2202      	movs	r2, #2
 8002eae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002eb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ebe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ec2:	fab2 f282 	clz	r2, r2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 021f 	and.w	r2, r2, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ad      	bne.n	8002e3a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8110 	beq.w	8003114 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d079      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x760>
 8002f04:	2301      	movs	r3, #1
 8002f06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	4bab      	ldr	r3, [pc, #684]	; (80031d0 <HAL_RCC_OscConfig+0x938>)
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe f999 	bl	8001264 <HAL_GetTick>
 8002f32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe f994 	bl	8001264 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f000 bcdb 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f68:	2202      	movs	r2, #2
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fa6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa8:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 8002faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	6019      	str	r1, [r3, #0]
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f1a3 	rbit	r1, r3
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fce:	6019      	str	r1, [r3, #0]
  return result;
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0a0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x6a0>
 8002ff6:	e08d      	b.n	8003114 <HAL_RCC_OscConfig+0x87c>
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa93 f2a3 	rbit	r2, r3
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800301a:	601a      	str	r2, [r3, #0]
  return result;
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003024:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	4b68      	ldr	r3, [pc, #416]	; (80031d0 <HAL_RCC_OscConfig+0x938>)
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	461a      	mov	r2, r3
 8003036:	2300      	movs	r3, #0
 8003038:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7fe f913 	bl	8001264 <HAL_GetTick>
 800303e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003044:	f7fe f90e 	bl	8001264 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d902      	bls.n	800305a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	f000 bc55 	b.w	8003904 <HAL_RCC_OscConfig+0x106c>
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003062:	2202      	movs	r2, #2
 8003064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	fa93 f2a3 	rbit	r2, r3
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003086:	2202      	movs	r2, #2
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fa93 f2a3 	rbit	r2, r3
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030aa:	2202      	movs	r2, #2
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 80030c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030d2:	2102      	movs	r1, #2
 80030d4:	6019      	str	r1, [r3, #0]
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f1a3 	rbit	r1, r3
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030ec:	6019      	str	r1, [r3, #0]
  return result;
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d197      	bne.n	8003044 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 81a1 	beq.w	800346c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003130:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d116      	bne.n	800316a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b23      	ldr	r3, [pc, #140]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	61d3      	str	r3, [r2, #28]
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003162:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_RCC_OscConfig+0x93c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d11a      	bne.n	80031ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_RCC_OscConfig+0x93c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_RCC_OscConfig+0x93c>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7fe f86f 	bl	8001264 <HAL_GetTick>
 8003186:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	e009      	b.n	80031a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318c:	f7fe f86a 	bl	8001264 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	; 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e3b1      	b.n	8003904 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_RCC_OscConfig+0x93c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ef      	beq.n	800318c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCC_OscConfig+0x940>
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4a02      	ldr	r2, [pc, #8]	; (80031cc <HAL_RCC_OscConfig+0x934>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6213      	str	r3, [r2, #32]
 80031c8:	e03c      	b.n	8003244 <HAL_RCC_OscConfig+0x9ac>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	10908120 	.word	0x10908120
 80031d4:	40007000 	.word	0x40007000
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10c      	bne.n	8003202 <HAL_RCC_OscConfig+0x96a>
 80031e8:	4bc1      	ldr	r3, [pc, #772]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4ac0      	ldr	r2, [pc, #768]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6213      	str	r3, [r2, #32]
 80031f4:	4bbe      	ldr	r3, [pc, #760]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4abd      	ldr	r2, [pc, #756]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	e020      	b.n	8003244 <HAL_RCC_OscConfig+0x9ac>
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b05      	cmp	r3, #5
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0x994>
 8003212:	4bb7      	ldr	r3, [pc, #732]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4ab6      	ldr	r2, [pc, #728]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	6213      	str	r3, [r2, #32]
 800321e:	4bb4      	ldr	r3, [pc, #720]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4ab3      	ldr	r2, [pc, #716]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6213      	str	r3, [r2, #32]
 800322a:	e00b      	b.n	8003244 <HAL_RCC_OscConfig+0x9ac>
 800322c:	4bb0      	ldr	r3, [pc, #704]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4aaf      	ldr	r2, [pc, #700]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	4bad      	ldr	r3, [pc, #692]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4aac      	ldr	r2, [pc, #688]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 800323e:	f023 0304 	bic.w	r3, r3, #4
 8003242:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8081 	beq.w	8003358 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003256:	f7fe f805 	bl	8001264 <HAL_GetTick>
 800325a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe f800 	bl	8001264 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e345      	b.n	8003904 <HAL_RCC_OscConfig+0x106c>
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003280:	2202      	movs	r2, #2
 8003282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003288:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	fa93 f2a3 	rbit	r2, r3
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032a4:	2202      	movs	r2, #2
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f2a3 	rbit	r2, r3
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032be:	601a      	str	r2, [r3, #0]
  return result;
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_OscConfig+0xa4c>
 80032de:	4b84      	ldr	r3, [pc, #528]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	e013      	b.n	800330c <HAL_RCC_OscConfig+0xa74>
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032ec:	2202      	movs	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f2a3 	rbit	r2, r3
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	4b79      	ldr	r3, [pc, #484]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003310:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003314:	2102      	movs	r1, #2
 8003316:	6011      	str	r1, [r2, #0]
 8003318:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800331c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	fa92 f1a2 	rbit	r1, r2
 8003326:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800332a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800332e:	6011      	str	r1, [r2, #0]
  return result;
 8003330:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003334:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d084      	beq.n	8003260 <HAL_RCC_OscConfig+0x9c8>
 8003356:	e07f      	b.n	8003458 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003358:	f7fd ff84 	bl	8001264 <HAL_GetTick>
 800335c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	e00b      	b.n	800337a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fd ff7f 	bl	8001264 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e2c4      	b.n	8003904 <HAL_RCC_OscConfig+0x106c>
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003382:	2202      	movs	r2, #2
 8003384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033a6:	2202      	movs	r2, #2
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033c0:	601a      	str	r2, [r3, #0]
  return result;
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_OscConfig+0xb4e>
 80033e0:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	e013      	b.n	800340e <HAL_RCC_OscConfig+0xb76>
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033ee:	2202      	movs	r2, #2
 80033f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003404:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003412:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003416:	2102      	movs	r1, #2
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	fa92 f1a2 	rbit	r1, r2
 8003428:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800342c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003430:	6011      	str	r1, [r2, #0]
  return result;
 8003432:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003436:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	fab2 f282 	clz	r2, r2
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	f002 021f 	and.w	r2, r2, #31
 800344c:	2101      	movs	r1, #1
 800344e:	fa01 f202 	lsl.w	r2, r1, r2
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d184      	bne.n	8003362 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003458:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8242 	beq.w	8003902 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <HAL_RCC_OscConfig+0xc58>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	f000 8213 	beq.w	80038b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2b02      	cmp	r3, #2
 800349a:	f040 8162 	bne.w	8003762 <HAL_RCC_OscConfig+0xeca>
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80034a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034c2:	601a      	str	r2, [r3, #0]
  return result;
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	461a      	mov	r2, r3
 80034e0:	2300      	movs	r3, #0
 80034e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd febe 	bl	8001264 <HAL_GetTick>
 80034e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ec:	e00c      	b.n	8003508 <HAL_RCC_OscConfig+0xc70>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fd feb6 	bl	8001264 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1fd      	b.n	8003904 <HAL_RCC_OscConfig+0x106c>
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003528:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800352c:	601a      	str	r2, [r3, #0]
  return result;
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003536:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HAL_RCC_OscConfig+0xcba>
 800354c:	4bb0      	ldr	r3, [pc, #704]	; (8003810 <HAL_RCC_OscConfig+0xf78>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	e027      	b.n	80035a2 <HAL_RCC_OscConfig+0xd0a>
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800355a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800355e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f2a3 	rbit	r2, r3
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	fa93 f2a3 	rbit	r2, r3
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	4b9c      	ldr	r3, [pc, #624]	; (8003810 <HAL_RCC_OscConfig+0xf78>)
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80035aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035ae:	6011      	str	r1, [r2, #0]
 80035b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	fa92 f1a2 	rbit	r1, r2
 80035be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035c6:	6011      	str	r1, [r2, #0]
  return result;
 80035c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	fab2 f282 	clz	r2, r2
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f042 0220 	orr.w	r2, r2, #32
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f002 021f 	and.w	r2, r2, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d182      	bne.n	80034f4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ee:	4b88      	ldr	r3, [pc, #544]	; (8003810 <HAL_RCC_OscConfig+0xf78>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	430b      	orrs	r3, r1
 8003610:	497f      	ldr	r1, [pc, #508]	; (8003810 <HAL_RCC_OscConfig+0xf78>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800361e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800363a:	601a      	str	r2, [r3, #0]
  return result;
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003644:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003650:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	461a      	mov	r2, r3
 8003658:	2301      	movs	r3, #1
 800365a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fd fe02 	bl	8001264 <HAL_GetTick>
 8003660:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003664:	e009      	b.n	800367a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003666:	f7fd fdfd 	bl	8001264 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e144      	b.n	8003904 <HAL_RCC_OscConfig+0x106c>
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800369e:	601a      	str	r2, [r3, #0]
  return result;
 80036a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_OscConfig+0xe2c>
 80036be:	4b54      	ldr	r3, [pc, #336]	; (8003810 <HAL_RCC_OscConfig+0xf78>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	e027      	b.n	8003714 <HAL_RCC_OscConfig+0xe7c>
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	fa93 f2a3 	rbit	r2, r3
 80036e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	4b3f      	ldr	r3, [pc, #252]	; (8003810 <HAL_RCC_OscConfig+0xf78>)
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003718:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800371c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003720:	6011      	str	r1, [r2, #0]
 8003722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003726:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	fa92 f1a2 	rbit	r1, r2
 8003730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003734:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003738:	6011      	str	r1, [r2, #0]
  return result;
 800373a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800373e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f002 021f 	and.w	r2, r2, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d082      	beq.n	8003666 <HAL_RCC_OscConfig+0xdce>
 8003760:	e0cf      	b.n	8003902 <HAL_RCC_OscConfig+0x106a>
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800376a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800376e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003774:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	fa93 f2a3 	rbit	r2, r3
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003786:	601a      	str	r2, [r3, #0]
  return result;
 8003788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003790:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800379c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	461a      	mov	r2, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fd fd5c 	bl	8001264 <HAL_GetTick>
 80037ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b0:	e009      	b.n	80037c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fd fd57 	bl	8001264 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e09e      	b.n	8003904 <HAL_RCC_OscConfig+0x106c>
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fa93 f2a3 	rbit	r2, r3
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037ea:	601a      	str	r2, [r3, #0]
  return result;
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d104      	bne.n	8003814 <HAL_RCC_OscConfig+0xf7c>
 800380a:	4b01      	ldr	r3, [pc, #4]	; (8003810 <HAL_RCC_OscConfig+0xf78>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	e029      	b.n	8003864 <HAL_RCC_OscConfig+0xfcc>
 8003810:	40021000 	.word	0x40021000
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800381c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	fa93 f2a3 	rbit	r2, r3
 8003830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003834:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fa93 f2a3 	rbit	r2, r3
 8003856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCC_OscConfig+0x1078>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003868:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800386c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003870:	6011      	str	r1, [r2, #0]
 8003872:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003876:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	fa92 f1a2 	rbit	r1, r2
 8003880:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003884:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003888:	6011      	str	r1, [r2, #0]
  return result;
 800388a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800388e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	fab2 f282 	clz	r2, r2
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	f042 0220 	orr.w	r2, r2, #32
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	f002 021f 	and.w	r2, r2, #31
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f202 	lsl.w	r2, r1, r2
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d180      	bne.n	80037b2 <HAL_RCC_OscConfig+0xf1a>
 80038b0:	e027      	b.n	8003902 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e01e      	b.n	8003904 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_RCC_OscConfig+0x1078>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d10b      	bne.n	80038fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000

08003914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b09e      	sub	sp, #120	; 0x78
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e162      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800392c:	4b90      	ldr	r3, [pc, #576]	; (8003b70 <HAL_RCC_ClockConfig+0x25c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d910      	bls.n	800395c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b8d      	ldr	r3, [pc, #564]	; (8003b70 <HAL_RCC_ClockConfig+0x25c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 0207 	bic.w	r2, r3, #7
 8003942:	498b      	ldr	r1, [pc, #556]	; (8003b70 <HAL_RCC_ClockConfig+0x25c>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <HAL_RCC_ClockConfig+0x25c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e14a      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b82      	ldr	r3, [pc, #520]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	497f      	ldr	r1, [pc, #508]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 8003976:	4313      	orrs	r3, r2
 8003978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80dc 	beq.w	8003b40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d13c      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xf6>
 8003990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003994:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800399e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_ClockConfig+0xa6>
 80039b4:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	e00f      	b.n	80039da <HAL_RCC_ClockConfig+0xc6>
 80039ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	667b      	str	r3, [r7, #100]	; 0x64
 80039c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039cc:	663b      	str	r3, [r7, #96]	; 0x60
 80039ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039de:	65ba      	str	r2, [r7, #88]	; 0x58
 80039e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e2:	fa92 f2a2 	rbit	r2, r2
 80039e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039ea:	fab2 f282 	clz	r2, r2
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	f042 0220 	orr.w	r2, r2, #32
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	f002 021f 	and.w	r2, r2, #31
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d17b      	bne.n	8003afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0f3      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d13c      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x178>
 8003a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x128>
 8003a36:	4b4f      	ldr	r3, [pc, #316]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	e00f      	b.n	8003a5c <HAL_RCC_ClockConfig+0x148>
 8003a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a44:	fa93 f3a3 	rbit	r3, r3
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a58:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a60:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a64:	fa92 f2a2 	rbit	r2, r2
 8003a68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a6c:	fab2 f282 	clz	r2, r2
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	f042 0220 	orr.w	r2, r2, #32
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	f002 021f 	and.w	r2, r2, #31
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d13a      	bne.n	8003afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0b2      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x2de>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x1a0>
 8003aae:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	e00d      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x1bc>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	61ba      	str	r2, [r7, #24]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	fa92 f2a2 	rbit	r2, r2
 8003ada:	617a      	str	r2, [r7, #20]
  return result;
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	fab2 f282 	clz	r2, r2
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f042 0220 	orr.w	r2, r2, #32
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f002 021f 	and.w	r2, r2, #31
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e079      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	491a      	ldr	r1, [pc, #104]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7fd fba8 	bl	8001264 <HAL_GetTick>
 8003b14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fd fba4 	bl	8001264 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e061      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_RCC_ClockConfig+0x260>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_ClockConfig+0x25c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d214      	bcs.n	8003b78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_RCC_ClockConfig+0x25c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 0207 	bic.w	r2, r3, #7
 8003b56:	4906      	ldr	r1, [pc, #24]	; (8003b70 <HAL_RCC_ClockConfig+0x25c>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_RCC_ClockConfig+0x25c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e040      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x2de>
 8003b70:	40022000 	.word	0x40022000
 8003b74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_RCC_ClockConfig+0x2e8>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	491a      	ldr	r1, [pc, #104]	; (8003bfc <HAL_RCC_ClockConfig+0x2e8>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba2:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <HAL_RCC_ClockConfig+0x2e8>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4912      	ldr	r1, [pc, #72]	; (8003bfc <HAL_RCC_ClockConfig+0x2e8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bb6:	f000 f829 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bba:	4601      	mov	r1, r0
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <HAL_RCC_ClockConfig+0x2e8>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc4:	22f0      	movs	r2, #240	; 0xf0
 8003bc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	fa92 f2a2 	rbit	r2, r2
 8003bce:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	fab2 f282 	clz	r2, r2
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	40d3      	lsrs	r3, r2
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x2ec>)
 8003bdc:	5cd3      	ldrb	r3, [r2, r3]
 8003bde:	fa21 f303 	lsr.w	r3, r1, r3
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <HAL_RCC_ClockConfig+0x2f0>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <HAL_RCC_ClockConfig+0x2f4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd faf6 	bl	80011dc <HAL_InitTick>
  
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3778      	adds	r7, #120	; 0x78
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	0800599c 	.word	0x0800599c
 8003c04:	20000000 	.word	0x20000000
 8003c08:	20000004 	.word	0x20000004

08003c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b08b      	sub	sp, #44	; 0x2c
 8003c10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c26:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d002      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x30>
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x36>
 8003c3a:	e03c      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c3e:	623b      	str	r3, [r7, #32]
      break;
 8003c40:	e03c      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	fa92 f2a2 	rbit	r2, r2
 8003c54:	607a      	str	r2, [r7, #4]
  return result;
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	fab2 f282 	clz	r2, r2
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	40d3      	lsrs	r3, r2
 8003c60:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
 8003c64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	220f      	movs	r2, #15
 8003c70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	fa92 f2a2 	rbit	r2, r2
 8003c78:	60fa      	str	r2, [r7, #12]
  return result;
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	fab2 f282 	clz	r2, r2
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	40d3      	lsrs	r3, r2
 8003c84:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c86:	5cd3      	ldrb	r3, [r2, r3]
 8003c88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca4:	e004      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	623b      	str	r3, [r7, #32]
      break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cb8:	623b      	str	r3, [r7, #32]
      break;
 8003cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	372c      	adds	r7, #44	; 0x2c
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	017d7840 	.word	0x017d7840
 8003cd4:	080059b4 	.word	0x080059b4
 8003cd8:	080059c4 	.word	0x080059c4
 8003cdc:	003d0900 	.word	0x003d0900
 8003ce0:	007a1200 	.word	0x007a1200

08003ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000000 	.word	0x20000000

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d02:	f7ff ffef 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d06:	4601      	mov	r1, r0
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	fa92 f2a2 	rbit	r2, r2
 8003d1c:	603a      	str	r2, [r7, #0]
  return result;
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	fab2 f282 	clz	r2, r2
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	40d3      	lsrs	r3, r2
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d2a:	5cd3      	ldrb	r3, [r2, r3]
 8003d2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	080059ac 	.word	0x080059ac

08003d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d46:	f7ff ffcd 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d4a:	4601      	mov	r1, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	fa92 f2a2 	rbit	r2, r2
 8003d60:	603a      	str	r2, [r7, #0]
  return result;
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	40d3      	lsrs	r3, r2
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	080059ac 	.word	0x080059ac

08003d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b092      	sub	sp, #72	; 0x48
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80d4 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da8:	4b4e      	ldr	r3, [pc, #312]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10e      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	4a4a      	ldr	r2, [pc, #296]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	61d3      	str	r3, [r2, #28]
 8003dc0:	4b48      	ldr	r3, [pc, #288]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d118      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dde:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dea:	f7fd fa3b 	bl	8001264 <HAL_GetTick>
 8003dee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	e008      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fd fa37 	bl	8001264 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b64      	cmp	r3, #100	; 0x64
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e169      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	4b38      	ldr	r3, [pc, #224]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8084 	beq.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d07c      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e30:	4b2c      	ldr	r3, [pc, #176]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b26      	ldr	r3, [pc, #152]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d04b      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fd f9e7 	bl	8001264 <HAL_GetTick>
 8003e96:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fd f9e3 	bl	8001264 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e113      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d108      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ede:	4b01      	ldr	r3, [pc, #4]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	e00d      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	10908100 	.word	0x10908100
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	4b78      	ldr	r3, [pc, #480]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2202      	movs	r2, #2
 8003f02:	613a      	str	r2, [r7, #16]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	fa92 f2a2 	rbit	r2, r2
 8003f0a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	fab2 f282 	clz	r2, r2
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f002 021f 	and.w	r2, r2, #31
 8003f1e:	2101      	movs	r1, #1
 8003f20:	fa01 f202 	lsl.w	r2, r1, r2
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0b7      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	496a      	ldr	r1, [pc, #424]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f44:	4b66      	ldr	r3, [pc, #408]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	4a65      	ldr	r2, [pc, #404]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f5c:	4b60      	ldr	r3, [pc, #384]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	f023 0203 	bic.w	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	495d      	ldr	r1, [pc, #372]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f7a:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4956      	ldr	r1, [pc, #344]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f98:	4b51      	ldr	r3, [pc, #324]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	494e      	ldr	r1, [pc, #312]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f023 0210 	bic.w	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	4947      	ldr	r1, [pc, #284]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	493f      	ldr	r1, [pc, #252]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f023 0220 	bic.w	r2, r3, #32
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4938      	ldr	r1, [pc, #224]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004010:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	4930      	ldr	r1, [pc, #192]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800402e:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	4929      	ldr	r1, [pc, #164]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800404c:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4921      	ldr	r1, [pc, #132]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800406a:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	491a      	ldr	r1, [pc, #104]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	4912      	ldr	r1, [pc, #72]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004096:	4313      	orrs	r3, r2
 8004098:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	490b      	ldr	r1, [pc, #44]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	4903      	ldr	r1, [pc, #12]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3748      	adds	r7, #72	; 0x48
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000

080040e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e09d      	b.n	8004232 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d108      	bne.n	8004110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004106:	d009      	beq.n	800411c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
 800410e:	e005      	b.n	800411c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fc fe2c 	bl	8000d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800415c:	d902      	bls.n	8004164 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e002      	b.n	800416a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004168:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004172:	d007      	beq.n	8004184 <HAL_SPI_Init+0xa0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800417c:	d002      	beq.n	8004184 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	ea42 0103 	orr.w	r1, r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	0c1b      	lsrs	r3, r3, #16
 80041e0:	f003 0204 	and.w	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004200:	ea42 0103 	orr.w	r1, r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e049      	b.n	80042e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fc fddb 	bl	8000e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 fa9b 	bl	80047b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0202 	mvn.w	r2, #2
 8004314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa24 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa16 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fa27 	bl	800478c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f9fa 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f9ec 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f9fd 	bl	800478c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9d0 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9c2 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f9d3 	bl	800478c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0210 	mvn.w	r2, #16
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2208      	movs	r2, #8
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f9a6 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f998 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f9a9 	bl	800478c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f972 	bl	8004750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fdfc 	bl	8005090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a6:	d10e      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fdef 	bl	80050a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f957 	bl	80047a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d10e      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d107      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0220 	mvn.w	r2, #32
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fdaf 	bl	800507c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004542:	2302      	movs	r3, #2
 8004544:	e0ff      	b.n	8004746 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b14      	cmp	r3, #20
 8004552:	f200 80f0 	bhi.w	8004736 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	080045b1 	.word	0x080045b1
 8004560:	08004737 	.word	0x08004737
 8004564:	08004737 	.word	0x08004737
 8004568:	08004737 	.word	0x08004737
 800456c:	080045f1 	.word	0x080045f1
 8004570:	08004737 	.word	0x08004737
 8004574:	08004737 	.word	0x08004737
 8004578:	08004737 	.word	0x08004737
 800457c:	08004633 	.word	0x08004633
 8004580:	08004737 	.word	0x08004737
 8004584:	08004737 	.word	0x08004737
 8004588:	08004737 	.word	0x08004737
 800458c:	08004673 	.word	0x08004673
 8004590:	08004737 	.word	0x08004737
 8004594:	08004737 	.word	0x08004737
 8004598:	08004737 	.word	0x08004737
 800459c:	080046b5 	.word	0x080046b5
 80045a0:	08004737 	.word	0x08004737
 80045a4:	08004737 	.word	0x08004737
 80045a8:	08004737 	.word	0x08004737
 80045ac:	080046f5 	.word	0x080046f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f98c 	bl	80048d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0204 	bic.w	r2, r2, #4
 80045da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6999      	ldr	r1, [r3, #24]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	619a      	str	r2, [r3, #24]
      break;
 80045ee:	e0a5      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f9fc 	bl	80049f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6999      	ldr	r1, [r3, #24]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	021a      	lsls	r2, r3, #8
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	619a      	str	r2, [r3, #24]
      break;
 8004630:	e084      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fa65 	bl	8004b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0208 	orr.w	r2, r2, #8
 800464c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0204 	bic.w	r2, r2, #4
 800465c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69d9      	ldr	r1, [r3, #28]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	61da      	str	r2, [r3, #28]
      break;
 8004670:	e064      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 facd 	bl	8004c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69d9      	ldr	r1, [r3, #28]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	021a      	lsls	r2, r3, #8
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	61da      	str	r2, [r3, #28]
      break;
 80046b2:	e043      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fb16 	bl	8004cec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0208 	orr.w	r2, r2, #8
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046f2:	e023      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fb5a 	bl	8004db4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004734:	e002      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
      break;
 800473a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop

08004750 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3c      	ldr	r2, [pc, #240]	; (80048b8 <TIM_Base_SetConfig+0x104>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00f      	beq.n	80047ec <TIM_Base_SetConfig+0x38>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d00b      	beq.n	80047ec <TIM_Base_SetConfig+0x38>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a39      	ldr	r2, [pc, #228]	; (80048bc <TIM_Base_SetConfig+0x108>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d007      	beq.n	80047ec <TIM_Base_SetConfig+0x38>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a38      	ldr	r2, [pc, #224]	; (80048c0 <TIM_Base_SetConfig+0x10c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_Base_SetConfig+0x38>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a37      	ldr	r2, [pc, #220]	; (80048c4 <TIM_Base_SetConfig+0x110>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d108      	bne.n	80047fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2d      	ldr	r2, [pc, #180]	; (80048b8 <TIM_Base_SetConfig+0x104>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01b      	beq.n	800483e <TIM_Base_SetConfig+0x8a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d017      	beq.n	800483e <TIM_Base_SetConfig+0x8a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2a      	ldr	r2, [pc, #168]	; (80048bc <TIM_Base_SetConfig+0x108>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <TIM_Base_SetConfig+0x8a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a29      	ldr	r2, [pc, #164]	; (80048c0 <TIM_Base_SetConfig+0x10c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_Base_SetConfig+0x8a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <TIM_Base_SetConfig+0x110>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_Base_SetConfig+0x8a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <TIM_Base_SetConfig+0x114>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_Base_SetConfig+0x8a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <TIM_Base_SetConfig+0x118>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_Base_SetConfig+0x8a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <TIM_Base_SetConfig+0x11c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d108      	bne.n	8004850 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <TIM_Base_SetConfig+0x104>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00f      	beq.n	800489c <TIM_Base_SetConfig+0xe8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <TIM_Base_SetConfig+0x110>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_Base_SetConfig+0xe8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <TIM_Base_SetConfig+0x114>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_Base_SetConfig+0xe8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <TIM_Base_SetConfig+0x118>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0xe8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a0e      	ldr	r2, [pc, #56]	; (80048d0 <TIM_Base_SetConfig+0x11c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d103      	bne.n	80048a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	615a      	str	r2, [r3, #20]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40013400 	.word	0x40013400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800

080048d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0302 	bic.w	r3, r3, #2
 8004920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <TIM_OC1_SetConfig+0x10c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00f      	beq.n	8004954 <TIM_OC1_SetConfig+0x80>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a2b      	ldr	r2, [pc, #172]	; (80049e4 <TIM_OC1_SetConfig+0x110>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_OC1_SetConfig+0x80>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <TIM_OC1_SetConfig+0x114>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_OC1_SetConfig+0x80>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a29      	ldr	r2, [pc, #164]	; (80049ec <TIM_OC1_SetConfig+0x118>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC1_SetConfig+0x80>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a28      	ldr	r2, [pc, #160]	; (80049f0 <TIM_OC1_SetConfig+0x11c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10c      	bne.n	800496e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f023 0308 	bic.w	r3, r3, #8
 800495a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <TIM_OC1_SetConfig+0x10c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00f      	beq.n	8004996 <TIM_OC1_SetConfig+0xc2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <TIM_OC1_SetConfig+0x110>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00b      	beq.n	8004996 <TIM_OC1_SetConfig+0xc2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <TIM_OC1_SetConfig+0x114>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <TIM_OC1_SetConfig+0xc2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <TIM_OC1_SetConfig+0x118>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_OC1_SetConfig+0xc2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <TIM_OC1_SetConfig+0x11c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d111      	bne.n	80049ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800499c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	621a      	str	r2, [r3, #32]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40013400 	.word	0x40013400
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400
 80049f0:	40014800 	.word	0x40014800

080049f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f023 0210 	bic.w	r2, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0320 	bic.w	r3, r3, #32
 8004a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a28      	ldr	r2, [pc, #160]	; (8004af4 <TIM_OC2_SetConfig+0x100>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC2_SetConfig+0x6c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <TIM_OC2_SetConfig+0x104>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10d      	bne.n	8004a7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <TIM_OC2_SetConfig+0x100>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00f      	beq.n	8004aa4 <TIM_OC2_SetConfig+0xb0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <TIM_OC2_SetConfig+0x104>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_OC2_SetConfig+0xb0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <TIM_OC2_SetConfig+0x108>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_OC2_SetConfig+0xb0>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <TIM_OC2_SetConfig+0x10c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_OC2_SetConfig+0xb0>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <TIM_OC2_SetConfig+0x110>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d113      	bne.n	8004acc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aaa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40013400 	.word	0x40013400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40014400 	.word	0x40014400
 8004b04:	40014800 	.word	0x40014800

08004b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <TIM_OC3_SetConfig+0xfc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_OC3_SetConfig+0x6a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <TIM_OC3_SetConfig+0x100>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10d      	bne.n	8004b8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <TIM_OC3_SetConfig+0xfc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00f      	beq.n	8004bb6 <TIM_OC3_SetConfig+0xae>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <TIM_OC3_SetConfig+0x100>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <TIM_OC3_SetConfig+0xae>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <TIM_OC3_SetConfig+0x104>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <TIM_OC3_SetConfig+0xae>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <TIM_OC3_SetConfig+0x108>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <TIM_OC3_SetConfig+0xae>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <TIM_OC3_SetConfig+0x10c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d113      	bne.n	8004bde <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40013400 	.word	0x40013400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800

08004c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	031b      	lsls	r3, r3, #12
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <TIM_OC4_SetConfig+0xc0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00f      	beq.n	8004c9c <TIM_OC4_SetConfig+0x84>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <TIM_OC4_SetConfig+0xc4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_OC4_SetConfig+0x84>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <TIM_OC4_SetConfig+0xc8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_OC4_SetConfig+0x84>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <TIM_OC4_SetConfig+0xcc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_OC4_SetConfig+0x84>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <TIM_OC4_SetConfig+0xd0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d109      	bne.n	8004cb0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40013400 	.word	0x40013400
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40014400 	.word	0x40014400
 8004ce8:	40014800 	.word	0x40014800

08004cec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <TIM_OC5_SetConfig+0xb4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00f      	beq.n	8004d66 <TIM_OC5_SetConfig+0x7a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a16      	ldr	r2, [pc, #88]	; (8004da4 <TIM_OC5_SetConfig+0xb8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_OC5_SetConfig+0x7a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <TIM_OC5_SetConfig+0xbc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <TIM_OC5_SetConfig+0x7a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <TIM_OC5_SetConfig+0xc0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_OC5_SetConfig+0x7a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <TIM_OC5_SetConfig+0xc4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d109      	bne.n	8004d7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	621a      	str	r2, [r3, #32]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40013400 	.word	0x40013400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40014400 	.word	0x40014400
 8004db0:	40014800 	.word	0x40014800

08004db4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	051b      	lsls	r3, r3, #20
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <TIM_OC6_SetConfig+0xb8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00f      	beq.n	8004e30 <TIM_OC6_SetConfig+0x7c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <TIM_OC6_SetConfig+0xbc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_OC6_SetConfig+0x7c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <TIM_OC6_SetConfig+0xc0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_OC6_SetConfig+0x7c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <TIM_OC6_SetConfig+0xc4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_OC6_SetConfig+0x7c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <TIM_OC6_SetConfig+0xc8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d109      	bne.n	8004e44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	029b      	lsls	r3, r3, #10
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40013400 	.word	0x40013400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40014400 	.word	0x40014400
 8004e7c:	40014800 	.word	0x40014800

08004e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e063      	b.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ed2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d018      	beq.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d013      	beq.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00e      	beq.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d009      	beq.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10c      	bne.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40014000 	.word	0x40014000

08004f80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e065      	b.n	8005068 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a16      	ldr	r2, [pc, #88]	; (8005074 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a14      	ldr	r2, [pc, #80]	; (8005078 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d115      	bne.n	8005056 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	051b      	lsls	r3, r3, #20
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40013400 	.word	0x40013400

0800507c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e040      	b.n	800514c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb ff34 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2224      	movs	r2, #36	; 0x24
 80050e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f82c 	bl	8005154 <UART_SetConfig>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e022      	b.n	800514c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9f6 	bl	8005500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fa7d 	bl	8005644 <UART_CheckIdleState>
 800514a:	4603      	mov	r3, r0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005182:	f023 030c 	bic.w	r3, r3, #12
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	6979      	ldr	r1, [r7, #20]
 800518c:	430b      	orrs	r3, r1
 800518e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4aa8      	ldr	r2, [pc, #672]	; (8005470 <UART_SetConfig+0x31c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d120      	bne.n	8005216 <UART_SetConfig+0xc2>
 80051d4:	4ba7      	ldr	r3, [pc, #668]	; (8005474 <UART_SetConfig+0x320>)
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d817      	bhi.n	8005210 <UART_SetConfig+0xbc>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0x94>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	08005205 	.word	0x08005205
 80051f0:	0800520b 	.word	0x0800520b
 80051f4:	080051ff 	.word	0x080051ff
 80051f8:	2301      	movs	r3, #1
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e0b5      	b.n	800536a <UART_SetConfig+0x216>
 80051fe:	2302      	movs	r3, #2
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e0b2      	b.n	800536a <UART_SetConfig+0x216>
 8005204:	2304      	movs	r3, #4
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e0af      	b.n	800536a <UART_SetConfig+0x216>
 800520a:	2308      	movs	r3, #8
 800520c:	77fb      	strb	r3, [r7, #31]
 800520e:	e0ac      	b.n	800536a <UART_SetConfig+0x216>
 8005210:	2310      	movs	r3, #16
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e0a9      	b.n	800536a <UART_SetConfig+0x216>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a97      	ldr	r2, [pc, #604]	; (8005478 <UART_SetConfig+0x324>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d124      	bne.n	800526a <UART_SetConfig+0x116>
 8005220:	4b94      	ldr	r3, [pc, #592]	; (8005474 <UART_SetConfig+0x320>)
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800522c:	d011      	beq.n	8005252 <UART_SetConfig+0xfe>
 800522e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005232:	d817      	bhi.n	8005264 <UART_SetConfig+0x110>
 8005234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005238:	d011      	beq.n	800525e <UART_SetConfig+0x10a>
 800523a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800523e:	d811      	bhi.n	8005264 <UART_SetConfig+0x110>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <UART_SetConfig+0xf8>
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d006      	beq.n	8005258 <UART_SetConfig+0x104>
 800524a:	e00b      	b.n	8005264 <UART_SetConfig+0x110>
 800524c:	2300      	movs	r3, #0
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e08b      	b.n	800536a <UART_SetConfig+0x216>
 8005252:	2302      	movs	r3, #2
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e088      	b.n	800536a <UART_SetConfig+0x216>
 8005258:	2304      	movs	r3, #4
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e085      	b.n	800536a <UART_SetConfig+0x216>
 800525e:	2308      	movs	r3, #8
 8005260:	77fb      	strb	r3, [r7, #31]
 8005262:	e082      	b.n	800536a <UART_SetConfig+0x216>
 8005264:	2310      	movs	r3, #16
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e07f      	b.n	800536a <UART_SetConfig+0x216>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a83      	ldr	r2, [pc, #524]	; (800547c <UART_SetConfig+0x328>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d124      	bne.n	80052be <UART_SetConfig+0x16a>
 8005274:	4b7f      	ldr	r3, [pc, #508]	; (8005474 <UART_SetConfig+0x320>)
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800527c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005280:	d011      	beq.n	80052a6 <UART_SetConfig+0x152>
 8005282:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005286:	d817      	bhi.n	80052b8 <UART_SetConfig+0x164>
 8005288:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800528c:	d011      	beq.n	80052b2 <UART_SetConfig+0x15e>
 800528e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005292:	d811      	bhi.n	80052b8 <UART_SetConfig+0x164>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <UART_SetConfig+0x14c>
 8005298:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800529c:	d006      	beq.n	80052ac <UART_SetConfig+0x158>
 800529e:	e00b      	b.n	80052b8 <UART_SetConfig+0x164>
 80052a0:	2300      	movs	r3, #0
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e061      	b.n	800536a <UART_SetConfig+0x216>
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e05e      	b.n	800536a <UART_SetConfig+0x216>
 80052ac:	2304      	movs	r3, #4
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e05b      	b.n	800536a <UART_SetConfig+0x216>
 80052b2:	2308      	movs	r3, #8
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e058      	b.n	800536a <UART_SetConfig+0x216>
 80052b8:	2310      	movs	r3, #16
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e055      	b.n	800536a <UART_SetConfig+0x216>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a6f      	ldr	r2, [pc, #444]	; (8005480 <UART_SetConfig+0x32c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d124      	bne.n	8005312 <UART_SetConfig+0x1be>
 80052c8:	4b6a      	ldr	r3, [pc, #424]	; (8005474 <UART_SetConfig+0x320>)
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80052d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052d4:	d011      	beq.n	80052fa <UART_SetConfig+0x1a6>
 80052d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052da:	d817      	bhi.n	800530c <UART_SetConfig+0x1b8>
 80052dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e0:	d011      	beq.n	8005306 <UART_SetConfig+0x1b2>
 80052e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e6:	d811      	bhi.n	800530c <UART_SetConfig+0x1b8>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <UART_SetConfig+0x1a0>
 80052ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f0:	d006      	beq.n	8005300 <UART_SetConfig+0x1ac>
 80052f2:	e00b      	b.n	800530c <UART_SetConfig+0x1b8>
 80052f4:	2300      	movs	r3, #0
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e037      	b.n	800536a <UART_SetConfig+0x216>
 80052fa:	2302      	movs	r3, #2
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e034      	b.n	800536a <UART_SetConfig+0x216>
 8005300:	2304      	movs	r3, #4
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e031      	b.n	800536a <UART_SetConfig+0x216>
 8005306:	2308      	movs	r3, #8
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e02e      	b.n	800536a <UART_SetConfig+0x216>
 800530c:	2310      	movs	r3, #16
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e02b      	b.n	800536a <UART_SetConfig+0x216>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a5b      	ldr	r2, [pc, #364]	; (8005484 <UART_SetConfig+0x330>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d124      	bne.n	8005366 <UART_SetConfig+0x212>
 800531c:	4b55      	ldr	r3, [pc, #340]	; (8005474 <UART_SetConfig+0x320>)
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005324:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005328:	d011      	beq.n	800534e <UART_SetConfig+0x1fa>
 800532a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800532e:	d817      	bhi.n	8005360 <UART_SetConfig+0x20c>
 8005330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005334:	d011      	beq.n	800535a <UART_SetConfig+0x206>
 8005336:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800533a:	d811      	bhi.n	8005360 <UART_SetConfig+0x20c>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <UART_SetConfig+0x1f4>
 8005340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005344:	d006      	beq.n	8005354 <UART_SetConfig+0x200>
 8005346:	e00b      	b.n	8005360 <UART_SetConfig+0x20c>
 8005348:	2300      	movs	r3, #0
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	e00d      	b.n	800536a <UART_SetConfig+0x216>
 800534e:	2302      	movs	r3, #2
 8005350:	77fb      	strb	r3, [r7, #31]
 8005352:	e00a      	b.n	800536a <UART_SetConfig+0x216>
 8005354:	2304      	movs	r3, #4
 8005356:	77fb      	strb	r3, [r7, #31]
 8005358:	e007      	b.n	800536a <UART_SetConfig+0x216>
 800535a:	2308      	movs	r3, #8
 800535c:	77fb      	strb	r3, [r7, #31]
 800535e:	e004      	b.n	800536a <UART_SetConfig+0x216>
 8005360:	2310      	movs	r3, #16
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	e001      	b.n	800536a <UART_SetConfig+0x216>
 8005366:	2310      	movs	r3, #16
 8005368:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005372:	d15c      	bne.n	800542e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005374:	7ffb      	ldrb	r3, [r7, #31]
 8005376:	2b08      	cmp	r3, #8
 8005378:	d827      	bhi.n	80053ca <UART_SetConfig+0x276>
 800537a:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <UART_SetConfig+0x22c>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053ad 	.word	0x080053ad
 8005388:	080053b5 	.word	0x080053b5
 800538c:	080053cb 	.word	0x080053cb
 8005390:	080053bb 	.word	0x080053bb
 8005394:	080053cb 	.word	0x080053cb
 8005398:	080053cb 	.word	0x080053cb
 800539c:	080053cb 	.word	0x080053cb
 80053a0:	080053c3 	.word	0x080053c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7fe fcaa 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 80053a8:	61b8      	str	r0, [r7, #24]
        break;
 80053aa:	e013      	b.n	80053d4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ac:	f7fe fcc8 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 80053b0:	61b8      	str	r0, [r7, #24]
        break;
 80053b2:	e00f      	b.n	80053d4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b4:	4b34      	ldr	r3, [pc, #208]	; (8005488 <UART_SetConfig+0x334>)
 80053b6:	61bb      	str	r3, [r7, #24]
        break;
 80053b8:	e00c      	b.n	80053d4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ba:	f7fe fc27 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 80053be:	61b8      	str	r0, [r7, #24]
        break;
 80053c0:	e008      	b.n	80053d4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c6:	61bb      	str	r3, [r7, #24]
        break;
 80053c8:	e004      	b.n	80053d4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	77bb      	strb	r3, [r7, #30]
        break;
 80053d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 8084 	beq.w	80054e4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	005a      	lsls	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	441a      	add	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d916      	bls.n	8005428 <UART_SetConfig+0x2d4>
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d212      	bcs.n	8005428 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f023 030f 	bic.w	r3, r3, #15
 800540a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	b29a      	uxth	r2, r3
 8005418:	89fb      	ldrh	r3, [r7, #14]
 800541a:	4313      	orrs	r3, r2
 800541c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	89fa      	ldrh	r2, [r7, #14]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	e05d      	b.n	80054e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	77bb      	strb	r3, [r7, #30]
 800542c:	e05a      	b.n	80054e4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800542e:	7ffb      	ldrb	r3, [r7, #31]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d836      	bhi.n	80054a2 <UART_SetConfig+0x34e>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0x2e8>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005461 	.word	0x08005461
 8005440:	08005469 	.word	0x08005469
 8005444:	0800548d 	.word	0x0800548d
 8005448:	080054a3 	.word	0x080054a3
 800544c:	08005493 	.word	0x08005493
 8005450:	080054a3 	.word	0x080054a3
 8005454:	080054a3 	.word	0x080054a3
 8005458:	080054a3 	.word	0x080054a3
 800545c:	0800549b 	.word	0x0800549b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005460:	f7fe fc4c 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8005464:	61b8      	str	r0, [r7, #24]
        break;
 8005466:	e021      	b.n	80054ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005468:	f7fe fc6a 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 800546c:	61b8      	str	r0, [r7, #24]
        break;
 800546e:	e01d      	b.n	80054ac <UART_SetConfig+0x358>
 8005470:	40013800 	.word	0x40013800
 8005474:	40021000 	.word	0x40021000
 8005478:	40004400 	.word	0x40004400
 800547c:	40004800 	.word	0x40004800
 8005480:	40004c00 	.word	0x40004c00
 8005484:	40005000 	.word	0x40005000
 8005488:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <UART_SetConfig+0x3a8>)
 800548e:	61bb      	str	r3, [r7, #24]
        break;
 8005490:	e00c      	b.n	80054ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005492:	f7fe fbbb 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8005496:	61b8      	str	r0, [r7, #24]
        break;
 8005498:	e008      	b.n	80054ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549e:	61bb      	str	r3, [r7, #24]
        break;
 80054a0:	e004      	b.n	80054ac <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	77bb      	strb	r3, [r7, #30]
        break;
 80054aa:	bf00      	nop
    }

    if (pclk != 0U)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d018      	beq.n	80054e4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	085a      	lsrs	r2, r3, #1
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	441a      	add	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	d908      	bls.n	80054e0 <UART_SetConfig+0x38c>
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d4:	d204      	bcs.n	80054e0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	e001      	b.n	80054e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	007a1200 	.word	0x007a1200

08005500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01a      	beq.n	8005616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fe:	d10a      	bne.n	8005616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	605a      	str	r2, [r3, #4]
  }
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af02      	add	r7, sp, #8
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005654:	f7fb fe06 	bl	8001264 <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b08      	cmp	r3, #8
 8005666:	d10e      	bne.n	8005686 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f82d 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e023      	b.n	80056ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d10e      	bne.n	80056b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f817 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e00d      	b.n	80056ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b09c      	sub	sp, #112	; 0x70
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4613      	mov	r3, r2
 80056e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e6:	e0a5      	b.n	8005834 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	f000 80a1 	beq.w	8005834 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fb fdb7 	bl	8001264 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <UART_WaitOnFlagUntilTimeout+0x32>
 8005702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005704:	2b00      	cmp	r3, #0
 8005706:	d13e      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571c:	667b      	str	r3, [r7, #100]	; 0x64
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005728:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800572c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e6      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3308      	adds	r3, #8
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	663b      	str	r3, [r7, #96]	; 0x60
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800575a:	64ba      	str	r2, [r7, #72]	; 0x48
 800575c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e5      	bne.n	800573a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e067      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d04f      	beq.n	8005834 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a2:	d147      	bne.n	8005834 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005800:	623a      	str	r2, [r7, #32]
 8005802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	69f9      	ldr	r1, [r7, #28]
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	61bb      	str	r3, [r7, #24]
   return(result);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e010      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	429a      	cmp	r2, r3
 8005850:	f43f af4a 	beq.w	80056e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3770      	adds	r7, #112	; 0x70
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e056      	b.n	8005924 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7fb fb5e 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff fc56 	bl	8005154 <UART_SetConfig>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e038      	b.n	8005924 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff fe20 	bl	8005500 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ce:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	055b      	lsls	r3, r3, #21
 80058e8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80058fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	6979      	ldr	r1, [r7, #20]
 8005908:	430b      	orrs	r3, r1
 800590a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fe91 	bl	8005644 <UART_CheckIdleState>
 8005922:	4603      	mov	r3, r0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <__libc_init_array>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4d0d      	ldr	r5, [pc, #52]	; (8005964 <__libc_init_array+0x38>)
 8005930:	4c0d      	ldr	r4, [pc, #52]	; (8005968 <__libc_init_array+0x3c>)
 8005932:	1b64      	subs	r4, r4, r5
 8005934:	10a4      	asrs	r4, r4, #2
 8005936:	2600      	movs	r6, #0
 8005938:	42a6      	cmp	r6, r4
 800593a:	d109      	bne.n	8005950 <__libc_init_array+0x24>
 800593c:	4d0b      	ldr	r5, [pc, #44]	; (800596c <__libc_init_array+0x40>)
 800593e:	4c0c      	ldr	r4, [pc, #48]	; (8005970 <__libc_init_array+0x44>)
 8005940:	f000 f820 	bl	8005984 <_init>
 8005944:	1b64      	subs	r4, r4, r5
 8005946:	10a4      	asrs	r4, r4, #2
 8005948:	2600      	movs	r6, #0
 800594a:	42a6      	cmp	r6, r4
 800594c:	d105      	bne.n	800595a <__libc_init_array+0x2e>
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	f855 3b04 	ldr.w	r3, [r5], #4
 8005954:	4798      	blx	r3
 8005956:	3601      	adds	r6, #1
 8005958:	e7ee      	b.n	8005938 <__libc_init_array+0xc>
 800595a:	f855 3b04 	ldr.w	r3, [r5], #4
 800595e:	4798      	blx	r3
 8005960:	3601      	adds	r6, #1
 8005962:	e7f2      	b.n	800594a <__libc_init_array+0x1e>
 8005964:	080059d4 	.word	0x080059d4
 8005968:	080059d4 	.word	0x080059d4
 800596c:	080059d4 	.word	0x080059d4
 8005970:	080059d8 	.word	0x080059d8

08005974 <memset>:
 8005974:	4402      	add	r2, r0
 8005976:	4603      	mov	r3, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	f803 1b01 	strb.w	r1, [r3], #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
